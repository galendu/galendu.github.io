{"posts":[{"title":"2024年您应该了解的13个Kubernetes工具","text":"概述 随着 Kubernetes 不断巩固其作为领先容器编排平台的地位，其周围的生态系统正在迅速发展。 到 2024 年，对于希望简化 Kubernetes 工作流程、增强安全性和优化性能的开发人员和 DevOps 专业人士来说，多种工具已成为必不可少的工具。 以下概述了 2024 年排名前 5 的 Kubernetes 工具，包括使用场景、优点、资源链接和建议的替代方案。 正文1. Argo CD概述: Argo CD 是一个声明式的 GitOps 持续交付工具，用于 Kubernetes，它自动化应用程序的部署，以确保实时状态与存储在 Git 仓库中的配置保持一致。 如何及何时使用: Argo CD 最适用于需要快速迭代和一致部署实践的环境。它在需要从开发到生产的多环境部署策略的场景中表现出色，并为变更提供了清晰的审计跟踪。 为什么使用: 通过采用 GitOps 方法，Argo CD 使团队能够将 Git 作为部署的单一真实来源，简化了过程，并增强了安全性和可追踪性。 GitHub: argoproj/argo-cd 网站: argoproj.github.io/argo-cd 使用代码示例: 12345argocd app create &lt;app-name&gt; \\ --repo &lt;your_repo_url&gt; \\ --path &lt;path_to_app_manifests&gt; \\ --dest-server https://kubernetes.default.svc \\ --dest-namespace &lt;namespace&gt; 文档: argo-cd.readthedocs.io 建议的替代品: Flux 2. Helm概述: Helm 是 Kubernetes 的包管理器，允许开发人员和运维人员轻松打包、配置和部署应用程序到 Kubernetes 集群上。 如何及何时使用: 在需要管理复杂应用程序的场景中，Helm 是非常宝贵的，它允许您使用简单的命令行界面定义、安装和升级 Kubernetes 应用程序。 为什么使用: Helm 图表提供了一种可重复的部署和管理应用程序的方式，支持复杂的依赖关系，并使更新和回滚变得容易。 GitHub: helm/helm 网站: helm.sh 使用代码示例: 1helm install my-app ./my-chart 文档: helm.sh/docs 建议的替代品: Kustomize 3. Kustomize概述: Kustomize 是一个 Kubernetes 原生的配置管理工具，增强了 Kubernetes 自身的配置管理能力。 如何及何时使用: 在需要维护同一应用程序的多个略有不同的配置的场景中，例如不同的环境或部署场景，Kustomize 特别有用。 为什么使用: Kustomize 允许在不需要模板处理或手动编辑的情况下自定义 Kubernetes 资源配置，使得在各种环境中管理应用程序配置变得更加容易。 GitHub: kubernetes-sigs/kustomize 网站: kustomize.io 使用代码示例: 1234# kustomization.yamlresources:- deployment.yaml- service.yaml 文档: kubectl.docs.kubernetes.io 建议的替代品: Helm 4. Prometheus概述: Prometheus 是一个开源的监控系统，具有维度数据模型、灵活的查询语言和报警能力。它设计用于可靠性和可伸缩性，使其成为 Kubernetes 环境的理想监控解决方案。 如何及何时使用: 使用 Prometheus 收集和存储指标作为时间序列数据，提供 Kubernetes 集群性能和应用程序健康状况的洞察。 为什么使用: 凭借其强大的数据模型和查询语言（PromQL），Prometheus 使得 Kubernetes 集群的详细观察和实时监控变得更加容易，从而更容易识别和解决问题。 GitHub: prometheus/prometheus 网站: prometheus.io 使用代码示例: 12345# 示例 Prometheus 抓取配置scrape_configs: - job_name: 'kubernetes-pods' kubernetes_sd_configs: - role: pod 文档: prometheus.io/docs/introduction/overview 建议的替代品: Grafana（用于可视化）或 Thanos（用于长期存储增强）。 5. Istio概述: Istio 是一个强大的服务网格，提供了一种控制微服务共享数据的方法。它提供高级流量管理、安全功能和对您的应用程序的可观测性。 如何及何时使用: Istio 特别适用于需要对流量、安全策略和服务监控进行细粒度控制的复杂微服务架构中。 为什么使用: 它提供了一个额外的基础设施层，允许您更有效地保护、连接和监控服务，而无需更改代码。 GitHub: istio/istio 网站: istio.io 使用代码示例: 1234567891011121314apiVersion: networking.istio.io/v1alpha3kind: Gatewaymetadata: name: my-gatewayspec: selector: istio: ingressgateway servers: - port: number: 80 name: http protocol: HTTP hosts: - &quot;*&quot; 文档: istio.io/latest/docs/ 建议的替代品: Linkerd 6. Tekton概述: Tekton 是一个强大且灵活的 Kubernetes 原生开源框架，用于创建 CI/CD 系统，允许开发人员在云提供商和本地系统中构建、测试和部署。 如何及何时使用: Tekton 最适合用于构建 Kubernetes 原生的 CI/CD 管道。它特别适用于希望以云原生方式跨不同环境标准化其开发工作流的团队。 为什么使用: Tekton 抽象了底层实现细节，并为构建和运行 CI/CD 管道提供了一套标准化的 Kubernetes 原生构造，使其高度可伸缩和可移植。 GitHub: tektoncd/pipeline 网站: tekton.dev 使用代码示例: 123456789101112apiVersion: tekton.dev/v1beta1kind: Taskmetadata: name: hello-worldspec: steps: - name: echo image: ubuntu command: - echo args: - &quot;Hello World&quot; 文档: tekton.dev/docs/ 建议的替代品: Jenkins X 7. Flux概述: Flux 是一种工具，它采用 GitOps 方法来管理 Kubernetes 集群，其中集群的期望状态在 Git 仓库中描述，并自动应用和更新。 如何及何时使用: Flux 特别适用于采用 GitOps 原则来管理其 Kubernetes 应用程序和基础设施的团队，确保集群状态始终与 Git 仓库同步。 为什么使用: 它自动化了部署过程，提高了可重复性和可追踪性，并且与 Kubernetes 无缝集成，降低了人为错误的风险。 GitHub: fluxcd/flux 网站: fluxcd.io 使用代码示例: 123456789apiVersion: helm.fluxcd.io/v1kind: HelmReleasemetadata: name: my-appspec: chart: repository: https://charts.my-company.com/ name: my-app version: 1.2.3 文档: fluxcd.io/docs/ 建议的替代品: Argo CD 8. Skaffold概述: Skaffold 是一个命令行工具，便于 Kubernetes 应用程序的持续开发。它自动化了构建、推送和部署应用程序的工作流，使开发者能够专注于代码迭代。 如何及何时使用: Skaffold 特别适合开发阶段，允许开发人员专注于编写代码而不用担心部署过程。它对于寻求开发过程中快速反馈循环的团队特别有用。 为什么使用: 通过自动化开发和部署过程来简化它，支持多种构建工具和部署策略，并且与现有的 CI/CD 管道很好地集成。 GitHub: GoogleContainerTools/skaffold 网站: skaffold.dev 使用代码示例: 123456789apiVersion: skaffold/v2beta13kind: Configbuild: artifacts: - image: my-appdeploy: kubectl: manifests: - k8s-* 文档: skaffold.dev/docs/ 建议的替代品: Tilt 9. KubeVela概述: KubeVela 是一个现代的应用部署系统，通过抽象底层基础设施的复杂性，简化了应用的部署和管理。 如何及何时使用: KubeVela 最适合在需要高度自动化和抽象来跨多个集群和云部署和管理云原生应用程序的环境中使用。 为什么使用: 它提供了一个简化且一致的应用交付方式，无论服务的复杂性如何，都使其对开发者易于访问，同时不牺牲运营商所需的灵活性和强大功能。 GitHub: oam-dev/kubevela 网站: kubevela.io 使用代码示例: 1234567891011apiVersion: core.oam.dev/v1beta1kind: Applicationmetadata: name: example-appspec: components: - name: example-component type: webservice properties: image: nginx port: 80 文档: kubevela.io/docs/ 建议的替代品: Helm 10. Crossplane概述: Crossplane 是一个开源的 Kubernetes 插件，它扩展了您的集群以将来自多个供应商和来源的基础设施作为标准 Kubernetes 资源进行管理和组合。 如何及何时使用: Crossplane 对于希望在其 Kubernetes 环境中采用基础设施即代码 (IaC) 实践的团队特别有用，它允许通过 Kubernetes API 管理外部资源，如数据库、集群和存储账户。 为什么使用: 它允许团队使用单一的声明式配置来统一部署和管理云原生应用及其依赖的基础设施。 GitHub: crossplane/crossplane 网站: crossplane.io 使用代码示例: 1234567apiVersion: database.example.org/v1alpha1kind: MySQLInstancemetadata: name: my-db-instancespec: engineVersion: &quot;5.7&quot; storageGB: 20 文档: crossplane.io/docs/ 建议的替代品: Terraform 11. Kube-bench概述: Kube-bench 是一个开源工具，旨在通过运行 CIS Kubernetes 基准文档中记录的检查，检查 Kubernetes 部署的安全性。 如何及何时使用: 使用 kube-bench 对 Kubernetes 集群进行安全合规性审计，按照 CIS (互联网安全中心) 最佳实践识别和修复潜在的漏洞。 为什么使用: 确保 Kubernetes 集群符合 CIS 基准有助于防范常见的安全威胁，并使您的操作符合安全 Kubernetes 部署的行业标准。 GitHub: aquasecurity/kube-bench 网站: 不适用 - 请参考 GitHub 仓库获取所有资源和文档。 使用代码示例: 要运行 kube-bench，通常在 Kubernetes 集群中的容器内执行它： 1kubectl run --rm -i -t kube-bench --image=aquasec/kube-bench:latest --restart=Never -- benchmarks/run 文档: 直接在 GitHub 仓库的 README 和不同 Kubernetes 版本的多个 markdown 文件中可用。 建议的替代品: Kube-hunter 12. Kubernetes External Secrets概述: Kubernetes External Secrets 允许您使用外部秘密管理系统，如 AWS Secrets Manager 或 HashiCorp Vault，来安全地在 Kubernetes 中添加秘密。 如何及何时使用: 当您需要在 Kubernetes 的原生 Secrets 机制之外管理敏感信息，并且需要一个安全的桥梁在 Kubernetes 应用程序中使用这些秘密而不暴露它们时，这个工具是必不可少的。 为什么使用: 它通过启用专用的秘密管理系统来增强安全性，这些系统提供了 Kubernetes 原生 Secrets 所不具备的高级功能，如秘密轮换、集中审计和访问控制。 GitHub: external-secrets/kubernetes-external-secrets 网站: 不适用 — GitHub 仓库作为主要的信息和文档来源。 使用代码示例: 123456789apiVersion: kubernetes-client.io/v1kind: ExternalSecretmetadata: name: my-database-secretspec: backendType: secretsManager data: - key: /my/organization/secrets/database/password name: password 文档: 文档可以在 GitHub 仓库中找到，包括设置说明、配置和使用示例。 建议的替代品: HashiCorp Vault 与 Kubernetes 集成 13. Octant概述Octant 是一个高度可扩展的、开源的、面向开发者的 Kubernetes Web 界面，为您的 Kubernetes 集群提供深入的洞察。它提供了一个集群内管理资源的全面视图，并具有使故障排除更加容易的功能。 如何以及何时使用Octant 特别适用于寻求其 Kubernetes 集群的视觉表示、需要调试问题、检查集群资源或了解它们之间关系的开发者和操作员。 为什么使用它提供实时更新、一个用于扩展功能的插件生态系统，以及一个用户友好的界面来浏览 Kubernetes 资源，使集群管理和故障排除更加容易。 GitHubhttps://github.com/vmware-tanzu/octant 网站https://octant.dev/ 使用代码示例Octant 是一个基于 GUI 的工具，因此典型的使用方式涉及在本地机器上启动应用程序，然后连接到您的 Kubernetes 集群： 1octant 文档https://octant.dev/docs/ 建议的替代品Kubernetes Dashboard 这些工具在 2024 年提供了 Kubernetes 工具景观的更广泛视图。从持续集成和交付到应用部署和基础设施管理，这些工具旨在满足 Kubernetes 生态系统内各种需求，使团队能够更有效地构建、部署和管理他们的应用程序和基础设施。享受使用，并随时评论和建议更多工具！","link":"/posts/45059.html"},{"title":"excle使用技巧","text":"概述 excle使用技巧 vlookup常见使用方法1.vlookup简单匹配=IFERROR(VLOOKUP(H4,$A$1:$E$31,3,0),&quot;&quot;) H4:要通过H4匹配$A$1:$E$31:匹配值所在的区域范围,做绝对匹配3:要返回的数据在匹配内容中所处的位置0:精确匹配“”:匹配不到时返回空 2.匹配返回多个值列锁定行不锁定=VLOOKUP($H8,$A$1:$E$31,COLUMN(B1),0) 3.关键字查找=VLOOKUP(&quot;*&quot;&amp;U6&amp;&quot;*&quot;,$P$2:$S$32,2,0) 1234&quot;*&quot;&amp;U6&amp;&quot;*&quot;:要通过R6关键字匹配$P$2:$S$32:匹配值所在的区域范围,做绝对匹配2:要返回的数据在匹配内容中所处的位置0:精确匹配 4.文本数值混合查找 将U6转为文本型的数据=VLOOKUP(U6&amp;&quot;&quot;,$B$1:$E$31,3,0) 将U6转为数值型的数据=VLOOKUP(U6*1,$B$1:$E$31,3,0) 5.去除空格查找 U6中有空格,U6中的空格删掉匹配=VLOOKUP(SUBSTITUTE(U6,&quot; &quot;,&quot;&quot;),$B$1:$E$31,3,0) 查找区域内有空格=VLOOKUP(U6,SUBSTITUTE($B$1:$E$31,&quot; &quot;,&quot;&quot;),3,0) 6.去除不可见字符查找=VLOOKUP(CLEAN(U6),CLEAN($B$1:$E$31),3,0) 7.多列动态查询 =VLOOKUP($I9,$A$1:$E$31,MATCH(J$8,$A$1:$E$1,0),0) $I9:列锁定 MATCH:多列动态查询 J$8: 锁定查询范围(锁定第8行) 8.一对多查找=COUNTIF($B$8:B8,B8) =B8&amp;COUNTIF($B$8:B8,B8) =VLOOKUP($F8&amp;COLUMN(A1),$A$7:$C$16,3,0) 9.查找组合=C8&amp;IFERROR(&quot;、&quot;&amp;VLOOKUP(B8,B9:D17,3,0),&quot;&quot;) 10.多区域混合查找=VLOOKUP(B8,IF(F21=&quot;是&quot;,$A$24:$C$34,$A$36:$C$48),2,0) 11.跨多表查询indirect=VLOOKUP($A4,INDIRECT(&quot;表&quot;&amp;COLUMN(A1)&amp;&quot;!$A$2:$D$6&quot;),4,0) 12.反向查找（数组）=VLOOKUP(G4,IF({1,0},$B$4:$B$7,$A$4:$A$7),2,0) 13.多条件查找=VLOOKUP(F11&amp;G11,IF({1,0},$B$4:$B$7&amp;$A$4:$A$7,$D$4:$D$7&amp;$A$4:$A$7),4,0)","link":"/posts/bfc3d4d5.html"},{"title":"go基础之go环境准备","text":"GO学习 go环境准备。https://youdianzhishi.com/web/course/1049/3235 正文windows环境安装golang 下载安装包: https://go.dev/dl/go1.22.2.windows-amd64.msi 安装go1.22.2.windows-amd64.msi 配置GOROOT和GOPATH环境变量 配置go代理在cmd/powershell/git-bash执行下面的命令12go env -w GO111MODULE=ongo env -w GOPROXY=https://goproxy.cn,direct linux环境安装golang123456wget https://go.dev/dl/go1.22.2.linux-amd64.tar.gztar zxvf goxxx.tar.gz –C /usr/local#在~/.bashrc文件中添加下面的内容export GOROOT=/usr/local/goexport GOPATH=/data/go_pathexport PATH=$PATH:$GOROOT/bin: :$GOPATH/bin vscode配置go开发环境安装go插件安装go扩展依赖工具 打开命令面板: Shift + Ctrl + P 输入: Install/Update 搜索 Go扩展依赖工具安装命令 安装失败后,执行下面的命令进行安装 123456789go install -v golang.org/x/tools/gopls@latestgo install -v honnef.co/go/tools/cmd/staticcheck@latestgo install -v github.com/go-delve/delve/cmd/dlv@latestgo install -v github.com/haya14busa/goplay/cmd/goplay@latestgo install -v github.com/josharian/impl@latestgo install -v github.com/fatih/gomodifytags@latestgo install -v github.com/cweill/gotests/gotests@latestgo install -v github.com/ramya-rao-a/go-outline@latestgo install -v github.com/uudashr/gopkgs/v2/cmd/gopkgs@latest 配置shell环境 在settings.json文件大括号中添加下面的内容 1234&quot;terminal.integrated.automationProfile.windows&quot;: { &quot;C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe&quot;},&quot;terminal.integrated.defaultProfile.windows&quot;: &quot;Git Bash&quot; 重启vscode, 可以看到默认打开Git Bash终端、也可选择其他终端 goland破解之2019.2.3将解压包中的jar包复制到F:\\project\\GoLand 2019.2.3\\lib目录在 Goland 安装目录的 bin 目录下找到goland.exe.vmoptions和goland64.exe.vmoptions两个文件。用记事本将它们打开，并分别在两个文件的最后面追加-javaagent:Goland 的安装目录\\lib\\jetbrains-agent.jar，注意将路径修改成你电脑上 Goland 的安装目录，例如：-javaagent:F:\\project\\GoLand 2019.2.3\\lib\\jetbrains-agent.jar，修改完成后记得保存。 运行Goland进入激活界面，选择Active，选择激活码激活，将解压的激活码打开复制到文本框中，然后OK即可。 go安装常见问题 goland中使用高版本的go时出现高版本无法识别的问题,报错”The selected directory is not a valid home for Go Sdk” zversion.go中添加要使用的sdk版本const TheVersion = go1.22.2 goland破解之2024.2.3 下载jetbra.zip包 安装最新版2024.2.3的golandhttps://www.jetbrains.com/go/ 破解 文件路径如图所示 卸载，防止历史运行过该脚本文件 安装 输入license 1X9MQ8M5LBM-eyJsaWNlbnNlSWQiOiJYOU1ROE01TEJNIiwibGljZW5zZWVOYW1lIjoiZ3VyZ2xlcyB0dW1ibGVzIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJBQyIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiRFBOIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiR08iLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRNIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlMwIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiRFMiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSQyIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJEIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUEMiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU1UiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSTSIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IldTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJEQyIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTViIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUlNGIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJSU0MiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQREIiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkRQIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIzMTIwOUxQQUEwMDEwMDkiLCJoYXNoIjoiVFJJQUw6MjAxNi4xIiwiZ3JhY2VQZXJpb2REYXlzIjozLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-YfGjX3wBpN0BKpIiuZdyG/NN4z8pLpOfzOjodnAqFomZafC0nTu5hRDMSkTB9Lrhfhl+5Mr8nC2BlFubcrLq3QzJRuAIinZ0DboIZhYLdnJhk3shg+qza6mnfUpwg0Cpq/TjlSO1Ov05JEBb6DeYqx4wBFeW0EbQcavJ8QiHMvrcQPkyD6oYvmU6QodraR9ILIYLKxKFra/Yg+tDWMoiTJ5sQ8DSzMsSrv4oCYvuP6Wu5qpQlxwY3sSy74BQ048PWJlnIoJNLnpd5x5A205Kze8tFyIu3Sm51KFZnC3GQUHlGloXwVHPI+ZHYghehPMcsCOpPlgOSRzFNw95gFzoYQ==-MIIETzCCAjegAwIBAgIEU7kY4jANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIyMTAxMDE2MDU0NFoXDTI0MTAxMTE2MDU0NFowHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMjEwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCx0QBxb4pfhYqM/RjSsvizyIncjO1EwCRgxPbKCcRFSY3ANBzS3hUdBzIxNuVbEPlnw50ItAn1iUwlyQ3QC7T+aG9E2R3IIIfEppb4F2SBi3YtgcZc3IrLgz8wa2p0iWTkkbFwnJxD4jMBfw9HDDbS5r9d9HVcPDH0rA+4nNIm7yek0wU6D77KJUWcNm7QHJfLeJAoOno+G3UIsnu7f63XRGkvdxK7L/WFzD9hCfSwZqmPZkCcrDLJTBdU4UpoJrfIoSeXZ+ssrSdQ9qY0JfUmRWvJNuUKeDBv6TI3ZCipJeZzXXafE7xD3Q57YS6KlIJEUzjZ2CRJIK3Zu5aqUTHbAgMBAAGjgZkwgZYwSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TAJBgNVHRMEAjAAMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDAdBgNVHQ4EFgQUQ0INJl2tuM1XlTAfueTuWydc7qIwDQYJKoZIhvcNAQELBQADggIBACzJFycVHjlSCEczoAHxgtF7NG4sDcpgmLh6nrMIZpDLLGc/whCv6vpcDkBo0XvuQwmZnbpf/Ndpy4ypP2OXIw94TlfOkGKVLdHDQU8ES1HpgAtscFtNg4dyZijF4pLgiK2nbCokvHI3oWQZY3ROswrjsh0HNHWdVKooEhWt3vBpXorusNRNWbwidznxySM5aABbHrlW0+EgXuLMEHBrybLu0QenEuTFZS3E91uSa7JLpU92aQyAmZUJAhogfIvssgwnmyfnOF3csixUV6lDBCf+SUGzQbYtZd/QsGI9uUUhBbLjoZnFhVEbbOntmB4/aUvSziZnbhRAY+OhVTrNX6GtXI03cAxVBk2Kh6DE62vBW3biBGHK5ClsQGW1f5RLWhqJh0d3EP6+dsAo2P3Ic5MCuspFwSfWoK3gNhvYlr57PNrzAWhBn6Od78RMaqg+dl+GHsm5sW5mbvXpvYNukEe1RHVIONl8OTKex1U12DeS4pAIA9aQxd1vYapmNdam3rnOQbynKLYa09aDPrWO5Y+LtaCix7TBmwXPtyCxBLK4S7EZ+FE7Xz322ulpKcvLZCTKBzUH5y62xHIcSijnxJfSU0W5UCApsnwochM5S6RPuVpvyQoBR5IX3Ugjw48jpuf2TGL/INWPHQ5AjK9ZNtWAfpkYc9w+AcNAa/v6J/Ha 如果无效使用下面的-测试时间2025-01-03 1YQLSN55KLT-eyJsaWNlbnNlSWQiOiJZUUxTTjU1S0xUIiwibGljZW5zZWVOYW1lIjoi5rC45LmF5Zyw5Z2AIHd3d8K3YWppaHVvwrdjb20iLCJsaWNlbnNlZVR5cGUiOiJQRVJTT05BTCIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDI1LTAxLTIyIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMjUtMDEtMjIiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRNIiwicGFpZFVwVG8iOiIyMDI1LTAxLTIyIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAyNS0wMS0yMiIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDI1LTAxLTIyIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU0MiLCJwYWlkVXBUbyI6IjIwMjUtMDEtMjIiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMjUtMDEtMjIiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRTIiwicGFpZFVwVG8iOiIyMDI1LTAxLTIyIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjAyNS0wMS0yMiIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUUEiLCJwYWlkVXBUbyI6IjIwMjUtMDEtMjIiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDI1LTAxLTIyIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU0YiLCJwYWlkVXBUbyI6IjIwMjUtMDEtMjIiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMjUtMDEtMjIiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDI1LTAxLTIyIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMjUtMDEtMjIiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDI1LTAxLTIyIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAyNS0wMS0yMiIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMjUtMDEtMjIiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJSIiwicGFpZFVwVG8iOiIyMDI1LTAxLTIyIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU1YiLCJwYWlkVXBUbyI6IjIwMjUtMDEtMjIiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMjUtMDEtMjIiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBTSSIsInBhaWRVcFRvIjoiMjAyNS0wMS0yMiIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsInBhaWRVcFRvIjoiMjAyNS0wMS0yMiIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJBSUwiLCJwYWlkVXBUbyI6IjIwMjUtMDEtMjIiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTIiwicGFpZFVwVG8iOiIyMDI1LTAxLTIyIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkRQIiwicGFpZFVwVG8iOiIyMDI1LTAxLTIyIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBEQiIsInBhaWRVcFRvIjoiMjAyNS0wMS0yMiIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUlIiLCJwYWlkVXBUbyI6IjIwMjUtMDEtMjIiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAyMjAyNDEyMjRQUEFNMDAxMDA1QSIsImhhc2giOiI2NDU5MzE5Mi8wOjk2NTI2Nzc2MiIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJ0cmlhbCI6ZmFsc2UsImFpQWxsb3dlZCI6dHJ1ZX0=-gQwtjy894c0xbgG5zoG4OHjkERm+L3LJK2W3/GPujewdoYWCf187k9R6iNugDlJJwA2U/yh1DyqqFaijeknuLFVIIRetG7ZMV0TVgHXiO6jBfYIyr8DFqxjm+Oey9EuCPbuBeSMfDMNESMKgdDlZHqAXFEHdaI8cXn9zvbIALXj3FnMI5imwdQgnrnaXpvmmIKjgjrgfVFZ8y3pw5iOsfILg6umoalAxEQrq7azvnpuJNjrGo/rmhSZIC+RW5ipyaHGXO/WlYrLD9rGW5/OatPKbOuCuZtYP6XfUK7oSX3E5PmalMvtt/uyqa8t54CZAYyDr3ybKGbhYjTctrMJBIw==-MIIETDCCAjSgAwIBAgIBETANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTI0MDkyMDEyMTEyN1oXDTI2MDkyMjEyMTEyN1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyNDA5MjAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC7SH/XcUoMwkDi8JJPzXWWHWFdOZdrP2Dqkz2W8iUi650cwz2vdPEd0tMzosLAj7ifkFEHUyiuEcL//q9d9Op7ZsV23lpPXX8tFMLFwugoQ9D8jDLT/XP9pp/YukWkKF5jpNbaCvsVQkDdYkArBkYvhH3aN4v9BkEsXahfgLLOPe4IG2FDJNf9R4to9V1vt+m2UVJB0zV4a/sVMKUZLgqKmKKKOKoLrE3OjBlZlb+Q0z2N5dsW0hDEVRFGmBUAbHN/mp44MMMvEIFKfoLIGpgic92P2O6uFh75PI7mcultL6yuR48ajErx8CjjQEGOSnoq/8hD+yVE+6GW2gJa2CPvAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUb5NERj05GyNerQ/Mjm9XH8HXtLIwSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBALq6VfVUjmPI3N/w0RYoPGFYUieCfRO0zVvD1VYHDWsN3F9buVsdudhxEsUb8t7qZPkDKTOB6DB+apgt2ZdKwok8S0pwifwLfjHAhO3b+LUQaz/VmKQW8gTOS5kTVcpM0BY7UPF8cRBqxMsdUfm5ejYk93lBRPBAqntznDY+DNc9aXOldFiACyutB1/AIh7ikUYPbpEIPZirPdAahroVvfp2tr4BHgCrk9z0dVi0tk8AHE5t7Vk4OOaQRJzy3lST4Vv6Mc0+0z8lNa+Sc3SVL8CrRtnTAs7YpD4fpI5AFDtchNrgFalX+BZ9GLu4FDsshVI4neqV5Jd5zwWPnwRuKLxsCO/PB6wiBKzdapQBG+P9z74dQ0junol+tqxd7vUV/MFsR3VwVMTndyapIS+fMoe+ZR5g+y44R8C7fXyVE/geg+JXQKvRwS0C5UpnS5FcGk+61b0e4U7pwO20RlwhEFHLSaP61p2TaVGo/TQtT/fWmrtV+HegAv9P3X3Se+xIVtJzQsk8QrB/w52IB3FKiAKl/KRn1egbMIs4uoNAkqNZ9Ih2P1NpiQnONFmkiAgeynJ+0FPykKdJQbV3Mx44jkaHIif4aFReTsYX1WUBNu/QerZRjn4FVSHRaZPSR5Oi82Wz0Nj7IY9ocTpLnXFrqkb/Kt3S6B9s2Kol3Lr1ElYA 激活","link":"/posts/94914928.html"},{"title":"grpc学习","text":"概述 grpc学习。 正文安装安装protoc安装 protoc，protoc是protobuf编译器，可以将源文件xxx.proto 编译成开发语言文件 ,例如xxx.pb.go下载 https://github.com/protocolbuffers/protobuf/releases/download/v3.20.0/protoc-3.20.0-win64.zip 解压protoc-3.20.0-win64.zip 将 protoc-3.20.0-win64.zip/bin设置为环境变量 安装protoc-gen-go-grpc 和 protoc-gen-go因为protoc没有内置go生成器，想实现.proto”..go的转换的话还需要安装protobuf的golang编译器插件protoc-gen-go，用于生成go文件 12go install google.golang.org/protobuf/cmd/protoc-gen-go@latestgo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest 验证 protoc-gen-go-grpc 和 protoc-gen-go12protoc-gen-go-grpc --versionprotoc-gen-go --version grpc使用定义proto文件xxproject/proto/message.proto123456789101112131415161718syntax = &quot;proto3&quot;// 定义生成的go文件存储在那个目录那个包中,../pb代表在当前目录的上一级pb目录中生成,//pb代表了生成的go文件的包名是pboption go_package = &quot;../pb;pb&quot;;// 顶一个一个service,称为MessageSender,这个服务有一个rpc方法,名为Send。// 这个方法会发送一个MessageRequest,然后返回一个MessageResponsemessage MessageResponse { string responseSomething = 1;}message MessageRequest { string saySomething = 1;}service MessageSender { rpc Send(MessageRequest) returns (MessageResponse) {}} 根据proto文件生成go代码文件, xxproject/proto/12345# 生成message.pb.go message_grpc.pb.go 两个文件.# 在这两个文件中,包含了我们定义方法的go语言实现,也包含了我们定义域响应的go语言实现.protoc --go_out=. message.protoprotoc --go-grpc_out=. message.proto# protoc --go_out=. --go-grpc_out=. message.proto server端响应实现(实现proto中的方法) xxproject/serviceImpl/MessageSenderServerImpl.go123456789101112131415161718192021222324package serviceImplimport ( &quot;context&quot; &quot;log&quot; &quot;xxproject/pb&quot;)// pb.UnimplementedMessageSenderServer结构体实现了MessageSenderServer接口// 通过嵌套的方式,我们自己定义的结构体也实现了MessageSenderServer接口// 实现后,我们就可以重写proto定义的rpc方法// 通过这种方式在rpc方法中写入我们的业务逻辑type MessageSenderServerImpl struct { *pb.UnimplementedMessageSenderServer}func (MessageSenderServerImpl) Send(context context.Context, request *pb.MessageRequest) (*pb.MessageResponse, error) { //打印请求参数 log.Println(&quot;receive message:&quot;, request.SaySomething) //处理响应 resp := &amp;pb.MessageResponse{} resp.ResponseSomething = &quot;this is grpc server, roger that&quot; return resp, nil} server端启动gRPC服务,xxproject/server/server.go123456789101112131415161718192021222324252627package mainimport ( &quot;google.golang.org/grpc&quot; &quot;log&quot; &quot;net&quot; &quot;xxproject/pb&quot; &quot;xxproject/serviceImpl&quot;)func main() { //new一个grpc服务 srv := grpc.NewServer() //注册服务 pb.RegisterMessageSenderServer(srv, serviceImpl.MessageSenderServerImpl{}) //启动服务 listener, err := net.Listen(&quot;tcp&quot;, &quot;:8002&quot;) if err != nil { log.Fatalf(&quot;failed to listen: %v&quot;, err) } err = srv.Serve(listener) if err != nil { log.Fatalf(&quot;failed to serve: %v&quot;, err) }} client端发起请求, xxproject/client/client.go1234567891011121314151617181920212223242526272829package mainimport ( &quot;context&quot; &quot;google.golang.org/grpc&quot; &quot;log&quot; &quot;xxproject/pb&quot;)func main() { //建立grpc连接 conn, err := grpc.Dial(&quot;127.0.0.1:8002&quot;, grpc.WithInsecure()) if err != nil { log.Fatalf(&quot;did not connect: %v&quot;, err) } defer conn.Close() //new grpc client client := pb.NewMessageSenderClient(conn) //发起grpc请求 resp, err := client.Send(context.Background(), &amp;pb.MessageRequest{ SaySomething: &quot;hello world&quot;, }) if err != nil { log.Fatalf(&quot;could not greet: %v&quot;, err) } log.Println(&quot;receive message:&quot;, resp.GetResponseSomething())}","link":"/posts/f3ee026e.html"},{"title":"proxmox-ve使用指南","text":"概述 proxmox-ve使用指南 proxmox-ve 使用 防火墙配置:/etc/pve/firewall/cluster.fw 查看状态/开启/关闭防火墙:pve-firewall status/start/stop proxmox-ve制作镜像模版。ubuntu镜像模板12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576VM_ID=901qm create $VM_ID --memory 1024 --net0 virtio,bridge=vmbr0qm importdisk $VM_ID /var/lib/vz/template/iso/jammy-server-cloudimg-amd64-disk-kvm.img local-lvmqm set $VM_ID --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-$VM_ID-disk-0qm set $VM_ID --ide0 local-lvm:cloudinitqm set $VM_ID --boot c --bootdisk scsi0qm set $VM_ID --serial0 socket --vga serial0qm set $VM_ID --agent enabled=1qm set $VM_ID --ciuser root --cipassword 123456qm set $VM_ID --nameserver 114.114.114.114 # qm set $VM_ID --ipconfig1 ip=192.168.3.241/24,gw=192.168.3.1qm set $VM_ID --ipconfig0 ip=dhcp,ip6=dhcp #动态配置qm start $VM_ID# 配置root登录,编辑/etc/ssh/sshd_config# PermitRootLogin yes# PubkeyAuthentication yes# 开启PasswordAuthentication认证，编辑/etc/cloud/cloud.cfg这个文件，添加 ssh_pwauth：true,如下图：# root@ubuntu:~# cat /etc/ssh/sshd_config.d/50-cloud-init.conf# PasswordAuthentication yessystemctl restart sshd# 在/etc/apt/sources.list.d创建一个名为tsinghua.sources的文件，添加如下内容：cat &gt;&gt;/etc/apt/sources.list.d/tsinghua.sources&lt;&lt;eofTypes: debURIs: https://mirrors.tuna.tsinghua.edu.cn/ubuntuSuites: noble noble-updates noble-backportsComponents: main restricted universe multiverseSigned-By: /usr/share/keyrings/ubuntu-archive-keyring.gpgTypes: debURIs: http://security.ubuntu.com/ubuntu/Suites: noble-securityComponents: main restricted universe multiverseSigned-By: /usr/share/keyrings/ubuntu-archive-keyring.gpgeof# 扩容分区# root@VM901:/etc/apt# parted /dev/sda# GNU Parted 3.4# Using /dev/sda# Welcome to GNU Parted! Type 'help' to view a list of commands.# (parted) resizepart 1 # Warning: Not all of the space available to /dev/sda appears to be used, you can fix the# GPT to use all of the space (an extra 62914560 blocks) or continue with the current# setting? # Fix/Ignore? # Fix/Ignore? Fix# Partition number? 1 # Warning: Partition /dev/sda1 is being used. Are you sure you want to continue?# Yes/No? Yes # End? [2361MB]? 30720 partprobe /dev/sdaresize2fs /dev/sda1apt update # 安装 qemu-guest-agentapt install qemu-guest-agent -yapt install --reinstall qemu-guest-agentsystemctl start qemu-guest-agent &amp;&amp; systemctl enable qemu-guest-agentqm set 901 --ipconfig0 ip=192.168.3.91/24,gw=192.168.3.2history -c &amp;&amp; init 0qm template $VM_IDfor id in $(seq 1 1 8)doqm clone 1000 24${id} --name demo-vm24${id} -full true -storage local-lvmqm set 24${id} --sockets 2 --cores 2 --memory 4096qm set 24${id} --scsi1 iothread=1,local-lvm:100qm set 24${id} --ciuser root --cipassword 123456qm set 24${id} --ipconfig0 ip=192.168.3.24${id}/24,gw=192.168.3.2qm set 24${id} --nameserver 114.114.114.114 qm start 24${id}done 123456789# https://blog.margrop.net/post/proxmox-ve-daily-maintain/# https://dev.to/asded_/deploying-your-kali-linux-templates-with-cloud-init-under-proxmox-ve-2ng77z x kali-linux-2024.3-qemu-amd64.7z virt-customize -a kali-linux-2024.3-qemu-amd64.qcow2 --install cloud-initvirt-customize -a kali-linux-2024.3-qemu-amd64.qcow2 --install qemu-guest-agentvirt-customize -a kali-linux-2024.3-qemu-amd64.qcow2 --run-command 'systemctl enable ssh.service'qm importdisk 100 kali-linux-2024.3-qemu-amd64.qcow2 local-lvm --format qcow2 使用terraform操作proxmox-ve创建terraform用户 12345678export PM_USER=terraform-prov@pveexport PM_PASS=123456terraform_role=TerraformProvpveum role add ${terraform-role} -privs &quot;Datastore.AllocateSpace Datastore.AllocateTemplate Datastore.Audit Pool.Allocate Sys.Audit Sys.Console Sys.Modify VM.Allocate VM.Audit VM.Clone VM.Config.CDROM VM.Config.Cloudinit VM.Config.CPU VM.Config.Disk VM.Config.HWType VM.Config.Memory VM.Config.Network VM.Config.Options VM.Migrate VM.Monitor VM.PowerMgmt SDN.Use&quot;pveum user add ${PM_USER} --password ${PM_PASS}pveum aclmod / -user ${PM_USER} -role ${terraform-role}pveum role modify ${terraform-role} -privs &quot;Datastore.AllocateSpace Datastore.AllocateTemplate Datastore.Audit Pool.Allocate Sys.Audit Sys.Console Sys.Modify VM.Allocate VM.Audit VM.Clone VM.Config.CDROM VM.Config.Cloudinit VM.Config.CPU VM.Config.Disk VM.Config.HWType VM.Config.Memory VM.Config.Network VM.Config.Options VM.Migrate VM.Monitor VM.PowerMgmt SDN.Use&quot; provider配置 123provider &quot;proxmox&quot; { pm_api_url = &quot;https://proxmox-server01.example.com:8006/api2/json&quot;} terraform.tf 123456789terraform { required_version = &quot;&gt;= 1.1.0&quot; required_providers { proxmox = { source = &quot;telmate/proxmox&quot; version = &quot;= 3.0.1-rc4&quot; } }} main.tf文件定义创建虚拟机 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253provider &quot;proxmox&quot; { pm_api_url = &quot;https://127.0.0.1:18006/api2/json&quot;}resource &quot;proxmox_vm_qemu&quot; &quot;proxmox-ubuntu&quot; { count = var.instance_count vmid = &quot;${var.id+count.index}&quot; name = &quot;ubuntu-${var.id+count.index}&quot; desc = &quot;Ubuntu develop environment&quot; # 节点名 target_node = &quot;pve&quot; # cloud-init template clone = &quot;VM 901&quot; full_clone = true cores = 4 sockets = 1 # 内存 memory = 4096 agent = 1 os_type = &quot;linux&quot; onboot = true network { model = &quot;virtio&quot; # 网络设备类型 bridge = &quot;vmbr0&quot; # 桥接接口 } ipconfig0 = &quot;ip=${var.ips}.${var.id+count.index}/24,gw=${var.ips}.1&quot; ciuser = &quot;root&quot; cipassword = &quot;123456&quot;}variable &quot;id&quot; { description = &quot;虚拟机的 ID&quot; type = number default = 101}variable &quot;instance_count&quot; { type = number default = 5 description = &quot;description&quot;}variable &quot;ips&quot; { type = string default = &quot;192.168.3&quot; description = &quot;description&quot;}","link":"/posts/7f78562b.html"},{"title":"hexo 简单操作方式","text":"通过git更新博客并对next主题进行优化配置 git将源码更新到github,并部署到个人博客1git add . &amp;&amp; git commit -m `date '+%Y%m%d%H%M'` &amp;&amp; git push hexohexo操作命令 创建新帖子或新页面hexo new [layout] [title] post是默认的layout,可以通过编辑_config.yaml中的default_layout修改 创建文章草稿hexo new draft xxx 将草稿发布为正式文章hexo P xxx 本地启动部署hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 远程部署更新hexo d -g 通过git上传到github,并自动更新到站点(通过github action实现)git add . &amp;&amp; git commit -m &quot;xxx&quot; &amp;&amp; git push next主题的安装优化 启用压缩 安装压缩插件：1npm install hexo-neat --save 在博客的 _config.yml 中配置该插件。 SEO优化 安装 SEO 插件：1npm install hexo-seo-autopush --save 12345678910111213141516171819# enable: 开启/关闭 推送# cron: 执行时间周期# count: 每次提交最新的10篇文章，输入0或者不填写则默认为所有文章(建议是最新的10篇文章)# date: 更新时间(updated)|创建日期(created)# https://github.com/Lete114/hexo-seo-autopush.githexo_seo_autopush: cron: 0 4 * * * baidu: enable: true date: created count: 10 bing: enable: true date: created count: 10 google: enable: true date: created count: 10 修改 CDN 1234vendors: internal: local plugins: custom custom_cdn_url: https://lib.baomitu.com/${cdnjs_name}/${version}/${cdnjs_file} 开启代码高亮 Next 主题自带代码高亮，通过 _config.yml 中的 highlight 部分来配置。 配置阅读全文按钮 配置主题文件中的_config.yml文件 123456789excerpt_description: true# Read more button# If true, the read more button will be displayed in excerpt section.read_more_btn: true#自动形成摘要auto_excerpt: enable: true length: 100 在博客中使用more进行摘要内容的截断标志.标志之后的内容不会在首页显示,而且会生成一个阅读全文的按钮(注意文档中不能有尖括号) 1234567891011121314---title: {{ title }}date: {{ date }}tags:categories:---## 概述&gt; 本文。&lt;!--more--&gt;## 正文 创建自定义样式文件 取消主题配置文件中的style: source/_data/styles.styl注释,在hexo根目录下的source目录创建_data目录,并将下面的内容写入到styles.styl文件中 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306// Custom styles.// 网站最顶部条线的颜色.headband { height: 0px; background: #F2F4EF;}// 设置背景图片//body{// //background:url(/images/bg.png);// background-repeat:no-repeat;// background-attachment:fixed;// background-position:center;//}// 设置侧边栏左上角网站标题和副标题区颜色.site-meta { background: #222222;}// 设置侧边栏网站标题样式.site-title { color:#fff;}// 设置侧边栏网站标题鼠标悬浮样式.site-title:hover { letter-spacing: 0.4rem;}// 侧边栏网站副标题样式.site-subtitle { color:#fff;}.site-author-image{border: 0px;}// 文章标题鼠标悬浮下划线样式.posts-expand .post-title-link::before { background: var(--link-color); bottom: 0; content: ''; height: 2px; left: 0; position: absolute; transform: scaleX(0); transition: transform .2s ease-in-out; width: 100%}// 文章标题颜色.posts-expand .post-title-link { //color:#DfA710; color:#10df58;}// 阅读全文按钮样式.btn { border:2px solid #DfA710; color:#DfA710;}// 阅读全文按钮鼠标悬浮样式.btn:hover { border-color: #DfA710; color: #fff; background: #DfA710;}// 设置文章和侧边栏中链接样式a:hover,span.exturl:hover { color: #DfA710; border-bottom-color: #DfA710;}// 修改文章页侧边栏文章目录下面的第一个标题的鼠标悬浮样式// 真的有毒，文章目录第一个标题的样式还是单独设置的...一开始还没发现.post-toc .nav .active-current &gt; a:hover { color: #DfA710;}// 文章页面左边文章标题颜色.post-toc ol a:hover { color: #DfA710; border-bottom-color: #DfA710;}// 文章页面左边文章标题active时颜色.post-toc .nav .active &gt; a { color: #DfA710; border-bottom-color: #DfA710;}// 文章页侧边栏文章目录和站点概况鼠标悬浮样式.sidebar-nav li:hover { color: #DfA710;}// 文章页侧边栏文章目录和站点概况active时鼠标悬浮样式.sidebar-nav .sidebar-nav-active:hover { color: #DfA710;}// 文章页侧边栏文章目录和站点概况active时样式.sidebar-nav .sidebar-nav-active { color: #DfA710; border-bottom-color: #DfA710;}// 社交栏鼠标悬浮样式#sidebar div.links-of-author.motion-element a:hover { color: #DfA710; background: rgba(255, 255, 255, 0);}// 友链鼠标悬浮样式.sidebar a:hover,.sidebar span.exturl:hover { border-bottom-color: #DfA710; color: #DfA710;}// RSS文字颜色//#sidebar div.feed-link.motion-element &gt; a {// color: #DfA710;//}// RSS图标颜色//#sidebar div.feed-link.motion-element &gt; a i{// color: #DfA710;//}// 侧边栏日志、分类、标签 上面的数字的颜色.site-state-item-count { color: #DfA710;}// 设置底部文章分页数字鼠标悬浮上划线颜色.pagination .prev:hover,.pagination .next:hover,.pagination .page-number:hover { border-top-color: #DfA710;}// 设置文章页上一篇文章和下一篇文章鼠标悬浮样式.post-nav-item a:hover { color: #DfA710; border-bottom: none;}// 修改鼠标选中字符的颜色/* webkit, opera, IE9 */::selection { background: #DfA710; color: #f7f7f7;}/* firefox */::-moz-selection { background: #DfA710; color: #f7f7f7;}// 侧边栏返回顶部按钮鼠标悬浮样式.back-to-top:hover { background: #eee; color: #DfA710;}// 当页面处于 首页、标签、分类、归档、关于页面其中之一时，处于哪个页面哪个选项就变蓝#menu &gt; li.menu-item-active &gt; a { color: #DfA710;}// 侧边栏导航小圆点颜色.menu-item-active a:after,.menu .menu-item a:hover:after,.menu .menu-item span.exturl:hover:after { background-color: #DfA710;}// 侧边栏上半部分设置为透明.menu-item-active a,.menu .menu-item a:hover,.menu .menu-item span.exturl:hover { background: rgba(242, 242, 242, 0.30); border-bottom-color: rgba(255, 255, 255, 0.2);;}// 侧边栏下半部分设置为透明.sidebar{ background: rgba(255, 255, 255, 0.0);}.sidebar-inner{ background: rgba(255, 255, 255, 0.2);}// 设置底部文章分页部分为透明.pagination{ background: rgba(255, 255, 255, 0.0);}.pagination .page-number.current { color: #fff; background: #DfA710;}// 导航栏底部百分比透明.back-to-top,.back-to-top:hover{ background: rgba(255, 255, 255, 0.3);}// 设置文章背景透明度.post-block{ background: rgba(255, 255, 255, 0.2);}// 这里需要完全透明，不然就会在上面的0.2基础上再进行透明度计算.btn{ background: rgba(255, 255, 255, 0);}.header-inner{ background: rgba(255, 255, 255, 0.2);}.main-inner { background: rgba(255, 255, 255, 0.2);}.site-brand-container{ background: #222222;}// 代码区背景.table-container{ background: rgba(240, 240, 222, 0.2);}.table-container :hover { background: rgba(237,237, 225, 0.03);}// 代码背景table &gt; tbody &gt; tr:nth-of-type(odd) { background-color: rgba(255, 255, 255, 0.0);}table &gt; tbody &gt; tr:hover { background-color: rgba(233,230, 230, 0.0);}pre,.highlight { background: rgba(200, 31, 33, 0);}//代码行标背景.highlight .gutter pre { background: rgbargba(227, 235, 227, 0.3);}.highlight .code pre { background: rgba(29, 31, 100, 0);}// 评论.comments { background: rgba(255, 255, 255, 0.2);}// 文章页内作者信息.post-copyright { border-left: 3px solid #DfA710; background: rgba(255, 255, 255, 0.3);}/* 行内代码块的自定义样式 */code { color: #FFFFFF; background: rgba(239, 183, 48, 0.4); margin: 2px; border: 0px solid #DfA710;}// 底部动态的叶子图标//.with-love{// color: red;//}// 去掉文章白色背景.main-inner { background: rgba(255,255,255,0.0);}// 标签页链接下划线颜色a,span.exturl { border-bottom: 1px solid #DfA710;}// 标签页链接鼠标悬浮颜色.tag-cloud a:hover { color: #DfA710 !important;} 高级优化： 懒加载 在 Next 主题配置文件中启用图片懒加载特性。 异步加载 优化 JavaScript 和 CSS 加载方式，使其异步加载，减少渲染阻塞。 数据分析 集成第三方分析工具如 Google Analytics。 社交功能集成 在 Next 主题配置中启动社交图标和分享按钮。 评论系统 集成第三方评论系统，如 Valine 或 Disqus，通过主题的 _config.yml 文件配置。 网站地图和 RSS 使用插件生成网站地图和 RSS feed，如：1npm install hexo-generator-sitemap hexo-generator-feed --save 内容目录 在 Next 主题中启用文章目录来提高长文章的可读性。 MathJax/LaTeX 支持 如果你需要在博客中撰写数学内容，可以开启 MathJax 支持。 具体操作：请参考每个插件和 Next 主题提供的文档进行配置。设置都在博客根目录下的 _config.yml 以及 Next 主题的 _config.yml 中完成。 post页面操作 自定义页面布局 1234567891011121314151617181920212223242526272829303132333435363738394041---title: test-1toc: truewidgets: - type: profile position: left author: Galen Du # Author title author_title: 日日行，不怕千万里；常常做，不怕千万事。 # Author's current location location: Gansu # URL or path to the avatar image avatar: /img/galendu-blog.png # Whether show the rounded avatar image avatar_rounded: true # Email address for the Gravatar gravatar: # URL or path for the follow button follow_link: https://github.com/galendu - type: toc position: left - type: categories position: left - type: tags position: leftdate: 2024-02-25 22:09:32tags:categories:cover:thumbnail:---## 概述&gt; 本文。&lt;!--more--&gt;## 正文","link":"/posts/5592.html"},{"title":"shell脚本学习手册","text":"概述 shell脚本学习手册 1.shell脚本基础1.1.shell脚本中特殊变量$0、$?、$!、$$、$*、$#、$@等的意义 名称 意义 $$ shell本身的PID $! shell最后运行的后台进程的PID $? shell最后运行的命令的返回值 $- shell使用Set命令设定的Flag $* 所有参数列表,单个字符串 “$1 $2 $3” $@ 所有参数列表,多个字符串 “$1” “$2” “$3” $# 传入的参数个数 $0 shell脚本的文件名 $1-$n shell脚本传入的第n个参数 2.执行bash shell脚本时,常用的参数 -n，读一遍脚本中的命令但不执行，用于检查脚本中的语法错误。 -v，一边执行脚本，一边将执行过的脚本命令打印到标准输出。 -x，提供跟踪执行信息，将执行的每一条命令和结果依次打印出来。 2.流程控制3.shell函数与数组4.shell正则表达式5.grep6.awk 推荐书籍：《The AWK Programming Language》 by Alfred V. Aho, Brian W. Kernighan, Peter J. Weinberger。在线教程：AWK Tutorial。https://cloud.tencent.com/developer/article/1159061 案例一将a.txt中的数据处理为b.txt中的形式a.txt 1234567891011121314列1 列2 列3x1 a1 xy1x2 a2 xy1x3 a2 xy2x4 a1 xy2x5 a2 xy3x6 a1 xy3``` b.txt ```text列3 a1 a2xy1 x1 x2xy2 x4 x3xy3 x6 x5 1234567891011121314151617181920awk 'BEGIN { # BEGIN 块中的代码在处理任何输入行之前执行一次。 FS = &quot;[ \\t]+&quot;; # 设置输入字段分隔符为空格或制表符 OFS = &quot;\\t&quot;; # 设置输出字段分隔符为制表符 print &quot;列3&quot;, &quot;a1&quot;, &quot;a2&quot;; # 输出文件头}NR &gt; 1 { # 处理每一行输入时执行，但跳过第一行（通常是表头行）。 key = $3; # 以第三列的值作为键 if ($2 == &quot;a1&quot;) { data[key][&quot;a1&quot;] = $1; # 如果第二列为 a1，存入对应键的 a1 子段 } else if ($2 == &quot;a2&quot;) { data[key][&quot;a2&quot;] = $1; # 如果第二列为 a2，存入对应键的 a2 子段 }}END { # END 块中的代码在处理完所有输入行之后执行一次。 for (key in data) { print key, data[key][&quot;a1&quot;], data[key][&quot;a2&quot;]; # 遍历 data 数组中的每一个键，并打印键值和对应的 a1 和 a2 子段值。 }}' a.txt &gt; b.txt 7.sed8.sort、uniq、cut9.rsync -R 同步目录rsync -R xx/a1/b.txt xx/a2/c.txt new/","link":"/posts/38836.html"},{"title":"terraform学习","text":"1 概述 terraform学习。语法查询https://developer.hashicorp.com/terraform/languageprovider地址https://registry.terraform.io/browse/modules最佳实践 https://www.cloudbolt.io/eguides/terraform-best-practices/ 2 terraform 命令参考123456789101112131415161718命令 用途terraform version 查看 Terraform 版本terraform init 初始化 Terraformterraform plan Terraform 执行计划terraform apply 应用 Terraformterraform show 检查 Terraform 状态terraform output 查看输出变量的值terraform graph 生成资源依赖图terraform destroy 销毁资源terraform workspace 管理 Terraform 工作区terraform workspace new 新建工作区terraform workspace list 列出工作区terraform workspace select 切换工作区terraform workspace delete 删除工作区terraform get 下载或更新 Terraform 模块terraform fmt 格式化 Terraform 代码terraform validate 检查 Terraform 语法terraform console Terraform 控制台 3 terraform使用3.1 编写Terraform配置3.1.1 alias的使用 多个 Azure 订阅管理: 如果你有多个 Azure 订阅，每个订阅可能有不同的资源组和资源，你可以通过不同的 alias 配置来管理它们 跨环境管理: 在开发、测试和生产环境中可能有不同的 Azure 订阅或账户，使用 alias 可以在同一个 Terraform 配置文件中管理这些环境的资源。 123456789101112131415161718192021222324252627282930313233terraform { required_version = &quot;~&gt; 1.1&quot; required_providers { azurerm = { version = &quot;~&gt; 3.9.0&quot; } }}provider &quot;azurerm&quot; { # 订阅id subscription_id = &quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot; alias = &quot;sub1&quot; features {}}provider &quot;azurerm&quot; { subscription_id = &quot;yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy&quot; alias = &quot;sub2&quot; features {}}resource &quot;azurerm_resource_group&quot; &quot;rg&quot; { provider = azurerm.sub1 # 使用别名为 sub1 的 Azure provider name = &quot;rg-sub1&quot; location = &quot;westeurope&quot;}resource &quot;azurerm_resource_group&quot; &quot;rg2&quot; { provider = azurerm.sub2 # 使用别名为 sub2 的 Azure provider name = &quot;rg-sub2&quot; location = &quot;westeurope&quot;} 3.1.2 使用check来验证基础设施123456789101112check &quot;response&quot; { data &quot;http&quot; &quot;webapp&quot; { url = &quot;https://${azurerm_linux_web_app.app.default_hostname}&quot; insecure = true } #通过检查http url地址访问状态码是否为200 assert { condition = data.http.webapp.status_code == 200 error_message = &quot;Web app response is ${data.http.webapp.status_code}&quot; }} 3.1.3 depends_on的使用 https://developer.hashicorp.com/terraform/language/meta-arguments/depends_on 1234567891011121314resource &quot;azurerm_resource_group&quot; &quot;rg&quot; { name = &quot;rgdep&quot; location = &quot;westeurope&quot;}resource &quot;azurerm_virtual_network&quot; &quot;vnet&quot; { name = &quot;vnet&quot; location = &quot;westeurope&quot; resource_group_name = &quot;rgdep&quot; address_space = [&quot;10.0.0.0/16&quot;] depends_on = [azurerm_resource_group.rg]} 3.1.4 函数upper的使用 函数upper的使用,将给定字符串中的所有大小写字母转换为大写更多函数的使用参考:https://developer.hashicorp.com/terraform/language/functions/chomp 12345#FOR CONDITIONresource &quot;azurerm_resource_group&quot; &quot;rg-app&quot; { name = var.environment == &quot;Production&quot; ? upper(format(&quot;RG-%s&quot;, var.app_name)) : upper(format(&quot;RG-%s-%s&quot;, var.app_name, var.environment)) location = &quot;westeurope&quot;} 3.1.5 环境变量local块的使用示例1 12345678910111213resource &quot;azurerm_public_ip&quot; &quot;pip&quot; { name = &quot;IP-${local.resource_name}&quot; location = &quot;westeurope&quot; resource_group_name = azurerm_resource_group.rg.name allocation_method = &quot;Dynamic&quot; domain_name_label = &quot;mydomain&quot;}locals { resource_name = &quot;${var.application_name}-${var.environment_name}-${var.country_code}&quot;} 示例2 动态配置生成：适用于需要根据外部数据源（如 YAML 文件）动态生成资源配置的场景，避免硬编码每个子网的配置。模块化和复用：通过 dynamic 块可以实现资源配置的模块化和复用，尤其是在处理变化和扩展性较高的情况下。 12345678vnet: &quot;myvnet&quot;address_space: &quot;10.0.0.0/16&quot;subnets: - name: subnet1 iprange: &quot;10.0.1.0/24&quot;- name: subnet2 iprange: &quot;10.0.2.0/24&quot; 123456789101112131415locals { network = yamldecode(file(&quot;network.yaml&quot;))}resource &quot;azurerm_virtual_network&quot; &quot;vnet&quot; { name = local.network.vnet address_space = [local.network.address_space] dynamic &quot;subnet&quot; { #动态生成子网 for_each = local.network.subnets #遍历列表 content { #content 块：content 块内部的配置会根据 for_each 迭代生成多个实例，每个实例代表一个子网。 name = subnet.value.name address_prefix = subnet.value.iprange } }} 3.1.6 output块的使用1234output &quot;webapp_name&quot; { description = &quot;output Name of the webapp&quot; value = azurerm_app_service.app.name} 3.1.7 随机数的使用 https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password 1234567891011121314151617181920212223resource &quot;random_password&quot; &quot;password&quot; { length = 16 special = true override_special = &quot;_%@&quot;}# Create virtual machineresource &quot;azurerm_linux_virtual_machine&quot; &quot;myterraformvm&quot; { name = &quot;myVM&quot; location = &quot;westeurope&quot; resource_group_name = azurerm_resource_group.myterraformgroup.name network_interface_ids = [azurerm_network_interface.myterraformnic.id] disable_password_authentication = false computer_name = &quot;vmdemo&quot; admin_username = &quot;uservm&quot; admin_password = random_password.password.result size = &quot;Standard_DS1_v2&quot; os_disk { name = &quot;myOsDisk&quot; caching = &quot;ReadWrite&quot; storage_account_type = &quot;Standard_LRS&quot; } 12345678resource &quot;random_string&quot; &quot;random&quot; { length = 4 special = false upper = false}resource &quot;azurerm_resource_group&quot; &quot;rg-app&quot; { name = &quot;${random_string.random.result}&quot;} 3.1.8 terraform_remote_state的使用123456789101112131415provider &quot;azurerm&quot; { skip_provider_registration = true # skip registration features {} # features}# data &quot;terraform_remote_state&quot; &quot;service_plan_tfstate&quot; 用于从远程存储中获取 Terraform 状态信息。data &quot;terraform_remote_state&quot; &quot;service_plan_tfstate&quot; { backend = &quot;azurerm&quot; #远程后端 config = { # config 区块包含了连接到远程状态存储所需的详细信息： resource_group_name = &quot;rg_tfstate&quot; storage_account_name = &quot;storstate&quot; container_name = &quot;tfbackends&quot; key = &quot;serviceplan.tfstate&quot; }} 3.1.9 variables的使用12# 定义的location变量要符合validation中的要求location = &quot;westeurope&quot; 123456789variable &quot;location&quot; { description = &quot;The name of the Azure location&quot; default = &quot;westeurope&quot; type = string validation { condition = contains([&quot;westeurope&quot;, &quot;westus&quot;], var.location) error_message = &quot;The location must be westeurope or westus.&quot; }} 3.2 使用Terraform扩展基础设施1234567891011121314variable &quot;nsg_rules&quot; { description = &quot;List of NSG rules&quot; type = list(object({ name = string priority = number direction = string access = string protocol = string source_port_range = string destination_port_range = string source_address_prefix = string destination_address_prefix = string }))} 12345678910111213141516171819202122232425nsg_rules = [ { name = &quot;rule1&quot; priority = 100 direction = &quot;Inbound&quot; access = &quot;Allow&quot; protocol = &quot;Tcp&quot; source_port_range = &quot;*&quot; destination_port_range = &quot;80&quot; source_address_prefix = &quot;*&quot; destination_address_prefix = &quot;*&quot; }, { name = &quot;rule&quot; priority = 110 direction = &quot;Inbound&quot; access = &quot;Allow&quot; protocol = &quot;Tcp&quot; source_port_range = &quot;*&quot; destination_port_range = &quot;22&quot; source_address_prefix = &quot;*&quot; destination_address_prefix = &quot;*&quot; }] 123456789101112131415161718resource &quot;azurerm_network_security_group&quot; &quot;example&quot; { name = &quot;acceptanceTestSecurityGroup1&quot; dynamic &quot;security_rule&quot; { for_each = var.nsg_rules content { name = security_rule.value[&quot;name&quot;] priority = security_rule.value[&quot;priority&quot;] direction = security_rule.value[&quot;direction&quot;] access = security_rule.value[&quot;access&quot;] protocol = security_rule.value[&quot;protocol&quot;] source_port_range = security_rule.value[&quot;source_port_range&quot;] destination_port_range = security_rule.value[&quot;destination_port_range&quot;] source_address_prefix = security_rule.value[&quot;source_address_prefix&quot;] destination_address_prefix = security_rule.value[&quot;destination_address_prefix&quot;] } }} 1234567# 1.count# 2.dynamics# 3.filter_array# 4.list_map# 5.map# 6.map_merge 3.34 terraform之provisioner123456789101112131415161718192021222324252627282930313233343536resource &quot;aws_instance&quot; &quot;app_server&quot; { count = var.instance_count ami = data.aws_ami.amazon_linux.id instance_type = var.ec2_instance_type key_name = &quot;galendu-key&quot; user_data_base64 = &quot;IyEvYmluL2Jhc2gNCnN1ZG8geXVtIHVwZGF0ZSAteQ0Kc3VkbyB5dW0gaW5zdGFsbCAteSBhbWF6b24tbGludXgtZXh0cmFzDQpzdWRvIHl1bSBpbnN0YWxsIG5naW54IC15DQpzdWRvIHN5c3RlbWN0bCBlbmFibGUgbmdpbngNCnN1ZG8gc3lzdGVtY3RsIHN0YXJ0IG5naW54DQpFT0Y=&quot; tags = var.resource_tags # provisioner &quot;file&quot; { # source = &quot;./conf/nginx.conf&quot; # destination = &quot;/etc/nginx/nginx.conf&quot; # connection { # type = &quot;ssh&quot; # host = self.public_ip # user = &quot;ec2_user&quot; # private_key = file(&quot;./.keys/galendu-key.pem&quot;) # timeout = &quot;4m&quot; # } # } # provisioner &quot;remote-exec&quot; { # inline = [ # &quot;sudo systemctl restart nginx&quot;, # &quot;sudo ls /usr/share/nginx/html/&quot;, # ] # } provisioner &quot;local-exec&quot; { command = &quot;ps -ef&quot; }} 5 terraform之modules https://developer.hashicorp.com/terraform/tutorials/modules 示例代码 12345678910git clone https://github.com/hashicorp/learn-terraform-modules-create.git cd learn-terraform-modules-createterraform initterraform planterraform applyaws s3 cp modules/aws-s3-static-website-bucket/www/ s3://$(terraform output -raw website_bucket_name)/ --recursiveaws s3 rm s3://$(terraform output -raw website_bucket_name)/ --recursiveterraform destroy 5 terraform最佳实践5.1 terraform调试方法 配置调试日志 123456789开启详细日志输出（环境变量 TF_LOG）Terraform 使用环境变量 TF_LOG 来控制日志级别。你可以设置不同的日志级别来获得不同程度的调试信息。日志级别：TRACE：最高级别的日志，提供最详细的信息。DEBUG：包含调试信息。INFO：默认的日志级别，提供较少的详细信息。WARN：仅记录警告信息。ERROR：仅记录错误信息。 检查语法是否正确terraform validate 检查格式是否正确terraform fmt 查看可视化依赖,生成依赖图terraform graph | dot -Tpng &gt; graph.png 交互式命令行 123terraform console&gt; var.my_variable&gt; aws_instance.example 模块调试 1234567891011121314# 1.在模块中定义输出output &quot;instance_id&quot; { value = aws_instance.example.id}# 2.在根模块中引用这个输出module &quot;my_module&quot; { source = &quot;./module&quot;}output &quot;module_instance_id&quot; { value = module.my_module.instance_id}# terraform apply -autoapprove -target=&quot;moudle.my_module&quot; terraform state 调试状态文件terraform state show aws_instance.example terraform taint 标记资源重新创建terraform taint aws_instance.example terraform refresh 刷新状态terraform refresh 5.2 alicloud配置123# 配置aliyun到git 目录 /c/Program Files/Git/usr/bin/aliyun.exe# 配置阿里云ak/skaliyun configure --profile AkProfile 5.3 通过terragrunt管理terraform https://github.com/gruntwork-io/terragrunthttps://terragrunt.gruntwork.io/ 5.3.1 安装123456789101112wget https://https://ghp.ci/https://github.com/gruntwork-io/terragrunt/releases/download/v0.68.4/terragrunt_windows_amd64.exe #Windows: You can install Terragrunt on Windows using Chocolatey: choco install terragrunt#macOS: You can install Terragrunt on macOS using Homebrew: brew install terragrunt#FreeBSD: You can install Terragrunt on FreeBSD using Pkg: pkg install terragruntterragrunt --install-autocomplete 5.3.2 使用 生成依赖图terragrunt graph-dependencies | dot -Tsvg &gt; graph.svg 限制并行数 terragrunt run-all apply --terragrunt-parallelism 4 保存输出terragrunt run-all plan --terragrunt-out-dir /tmp/tfplan 通过输出的文件进行部署terragrunt run-all apply --terragrunt-out-dir /tmp/tfplan 删除输出文件terragrunt run-all plan -destroy --terragrunt-out-dir /tmp/tfplan 输出二进制文件和json文件terragrunt run-all plan --terragrunt-out-dir /tmp/all --terragrunt-json-out-dir /tmp/all 常用命令 1234terragrunt run-all applyterragrunt run-all destroyterragrunt run-all outputterragrunt run-all plan 5.3.3 常用函数123#获取当前目录的基本名称basename(get_terragrunt_dir()) 6 terraform常见问题处理6.1 lock锁terraform force-unlock &lt;ID&gt; 6.2 for_each、appends_on、count不能使用删除modules中的versions.tf的provider配置","link":"/posts/603d1a10.html"},{"title":"windows命令行下使用msiexec安装、修复、卸载软件","text":"概述 windows命令行下使用msiexec安装、修复、卸载软件。 简介msiexec 是 Windows 操作系统中用于安装、修复、卸载 Windows Installer (MSI) 文件的命令行工具。 基本语法和用法msiexec基本语法msiexec /option [arguments]其中/option是指定的操作选项，可以是安装、修复、卸载等。常用操作选项 安装 MSI 文件：msiexec /i path\\to\\installer.msi /i指定安装操作。 path\\to\\installer.msi是MSI文件的路径。 示例： msiexec /i C:\\path\\to\\installer.msi 卸载 MSI 文件：msiexec /x {ProductCode} /x 指定卸载操作。 {ProductCode} 是安装时生成的产品代码，通常是一个 GUID。 示例： msiexec /x {AC28B3A3-0A94-4A70-B5A0-D87A8A42C6E3} 修复已安装的程序： msiexec /f {ProductCode} /f 指定修复操作。 示例：msiexec /f {AC28B3A3-0A94-4A70-B5A0-D87A8A42C6E3} 静默安装：使用 /quiet 或 /qn 选项可以进行静默安装，即无需用户交互地完成安装过程。 msiexec /i path\\to\\installer.msi /quiet 示例：msiexec /i C:\\path\\to\\installer.msi /quiet 其他选项和参数 /l*vx logfile.txt：生成安装日志文件。 /norestart：安装完成后不重新启动计算机。 /passive：显示进度条，但无需用户输入。","link":"/posts/49b8b311.html"},{"title":"前端入门教程","text":"概述 前端入门教程 基础内容配置开发环境 vscode安装HTML CSS Support、Live Server 、Auto Rename Tag三个插件 图形编辑软件可以选择GIMP 、Figma 、Paint.NET 、Photoshop 、Sketch 或 XD CSS生成软件enjoycss 图标下载 常见文本标签练习1.标题标签html提供了六个等级的网页标题 1&lt;h1&gt;&lt;/h1&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h5&gt;&lt;/h5&gt;&lt;h6&gt;&lt;/h6&gt; 2.段落和文本样式 12345&lt;p&gt;这是一个段落: &lt;/p&gt;&lt;p&gt; 文本处理: &lt;b&gt;加粗&lt;/b&gt; &lt;i&gt;斜体&lt;/i&gt; &lt;u&gt;下划线&lt;/u&gt; &lt;s&gt;删除线&lt;/s&gt;&lt;/p&gt; 3.列表 1234567891011121314&lt;!-- 无序列表 unordered list --&gt; &lt;ul&gt; &lt;li&gt;无序列表元素1&lt;/li&gt; &lt;li&gt;无序列表元素2&lt;/li&gt; &lt;li&gt;无序列表元素3&lt;/li&gt; &lt;li&gt;无序列表元素4&lt;/li&gt; &lt;/ul&gt;&lt;!-- 有序列表 ordered list --&gt; &lt;ol&gt; &lt;li&gt;有序列表元素1&lt;/li&gt; &lt;li&gt;有序列表元素2&lt;/li&gt; &lt;li&gt;有序列表元素3&lt;/li&gt; &lt;li&gt;有序列表元素4&lt;/li&gt; &lt;/ol&gt; 4.表格 12345678910111213141516171819202122&lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;th&gt;列标题1&lt;/th&gt; &lt;th&gt;列标题2&lt;/th&gt; &lt;th&gt;列标题3&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;元素1&lt;/td&gt; &lt;td&gt;元素2&lt;/td&gt; &lt;td&gt;元素3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;元素11&lt;/td&gt; &lt;td&gt;元素12&lt;/td&gt; &lt;td&gt;元素13&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;元素21&lt;/td&gt; &lt;td&gt;元素22&lt;/td&gt; &lt;td&gt;元素23&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; HTML属性12345678910111213141516 &lt;a href=&quot;https://galendu.github.io&quot;&gt;这是一个超链接&lt;/a&gt; &lt;br&gt; &lt;!-- &lt;a target=&quot;&quot;&gt; target指定在何处显示链接的 URL,默认_self, 将 URL 加载到与当前浏览上下文相同的浏览上下文中 _blank: 使用新窗口 _parent: 将 URL 加载到当前浏览上下文的父浏览上下文中。 如果没有父级，则其行为与 _self 相同。 _top: 将 URL 加载到顶级浏览上下文（即，“最高”浏览上下文，是当前浏览上下文的祖先，并且没有父级）。 如果没有父级，则其行为与 _self 相同。--&gt; &lt;a href=&quot;https://galendu.github.io&quot; target=&quot;_top&quot;&gt;这是第二个超链接&lt;/a&gt; &lt;hr&gt; &lt;img src=&quot;01.png&quot; alt=&quot;&quot;&gt;&lt;!-- img 当src地址无法访问时,显示alt中的内容 --&gt; &lt;img src=&quot;https://img0.baidu.com/it/u=256816879,771155532&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=1204&amp;h=800&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://xxximg0.baidu.com/it/u=256816879,771155532&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=1204&amp;h=800&quot; alt=&quot;该图片无法显示&quot;&gt; &lt;img src=&quot;https://img0.baidu.com/it/u=256816879,771155532&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=1204&amp;h=800&quot; alt=&quot;该图片无法显示&quot; width=&quot;400&quot; height=&quot;360&quot;&gt; HTML区块123456789101112131415161718192021&lt;div class=&quot;nav&quot;&gt; &lt;a href=&quot;#&quot;&gt;链接 1&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;链接 2&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;链接 3&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;链接 4&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt; &lt;h1&gt;文章标题&lt;/h1&gt; &lt;p&gt;文章内容&lt;/p&gt; &lt;p&gt;文章内容&lt;/p&gt; &lt;p&gt;文章内容&lt;/p&gt; &lt;p&gt;文章内容&lt;/p&gt; &lt;p&gt;文章内容&lt;/p&gt;&lt;/div&gt;&lt;span&gt;这是第1个span标签&lt;/span&gt;&lt;span&gt;这是第2个span标签&lt;/span&gt;&lt;span&gt;这是第3个span标签&lt;/span&gt;&lt;span&gt;这是第4个span标签&lt;/span&gt;&lt;hr&gt;&lt;span&gt;链接点击这里 &lt;a href=&quot;#&quot;&gt;链接&lt;/a&gt;&lt;/span&gt; HTML表单1234567891011121314151617181920212223&lt;!-- form 用来收集用户输入,action属性定义在提交表单时执行的动作(提交参数到后端服务) --&gt;&lt;form action=&quot;&quot;&gt; &lt;label for=&quot;username&quot;&gt;用户名:&lt;/label&gt; &lt;input type=&quot;text&quot; id=&quot;username&quot; placeholder=&quot;请输入用户名&quot;&gt;&lt;br&gt;&lt;br&gt; &lt;label for=&quot;pwd&quot;&gt;密码:&lt;/label&gt; &lt;input type=&quot;password&quot; id=&quot;pwd&quot; placeholder=&quot;请输入密码&quot;&gt;&lt;br&gt;&lt;br&gt; &lt;label&gt;性别&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;&quot;&gt;男 &lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;&quot;&gt;女 &lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;&quot;&gt;其他&lt;br&gt;&lt;br&gt; &lt;label for=&quot;&quot;&gt;爱好:&lt;/label&gt; &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; id=&quot;&quot;&gt;唱歌 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; id=&quot;&quot;&gt;跳舞 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; id=&quot;&quot;&gt;RAP &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; id=&quot;&quot;&gt;篮球 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; id=&quot;&quot;&gt;足球&lt;br&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&lt;/form&gt;&lt;form action=&quot;#&quot;&gt;&lt;/form&gt; CSS导入方式12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;CSS 导入方式&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/style.css&quot;&gt; &lt;style&gt; p { color: blue; font-size: 26px; } h2 { color: green; } h1 { color: white; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;这是一个应用了css样式的文本&lt;/p&gt; &lt;h1 style=&quot;color: red;&quot;&gt;这是一个一级标题标签&lt;/h1&gt; &lt;h2&gt;这是一个二级标题,应用内部样式&lt;/h2&gt; &lt;h3&gt;这是一个三级标题,应用外部样式&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt; 1234/* css/style.css */h3{ color: brown;} CSS选择器12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;CSS 选择器&lt;/title&gt; &lt;style&gt; /* 元素选择器 */ h2 { color: aqua; } /* 类选择器 类名前加点 */ .highlight { background-color: yellow; } /* ID选择器 */ #header { font-size: 35px; } /* 通用选择器 */ * { font-family: 'KaiTi'; font-weight: bolder; } /* 子元素选择器 */ .father&gt;.son { color: yellowgreen; } /* 后代选择器 */ .father p { color: brown; font-size: larger; } /* 相邻元素选择器 */ h3+p { background-color: red; } /* 伪类选择器 */ #element:hover { background-color: blueviolet; } /* 选中第一个子元素: :first-child :nth-child :active */ /* 伪元素选择器 ::after ::before */ /* id&gt;类&gt;标签名 */ &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;不同类型的 CSS 选择器 &lt;/h1&gt; &lt;h2&gt;这是一个元素选择器示例&lt;/h2&gt; &lt;h3 class=&quot;highlight&quot;&gt;这是一个类选择器示例&lt;/h3&gt; &lt;h3&gt;这是另一个类选择器示例&lt;/h3&gt; &lt;h4 id=&quot;header&quot;&gt;这是一个 ID 选择器示例&lt;/h4&gt; &lt;div class=&quot;father&quot;&gt; &lt;p class=&quot;son&quot;&gt;这是一个子元素选择器示例&lt;/p&gt; &lt;div&gt; &lt;p class=&quot;grandson&quot;&gt;这是一个后代选择器示例&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;这是一个普通的 p 标签&lt;/p&gt; &lt;h3&gt;这是一个相邻兄弟选择器示例&lt;/h3&gt; &lt;p&gt;这是另一个 p 标签&lt;/p&gt; &lt;h3 id=&quot;element&quot;&gt;这是一个伪类选择器示例&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt; CSS常用属性1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;CSS常用属性&lt;/title&gt; &lt;style&gt; /* 块元素 */ .block { background-color: aqua; width: 150px; height: 100px; } /* 行内元素 */ .inline { background-color: brown; } /* 行内块元素 */ .inline-block { width: 100px; height: 100px; } .div-inline { display: inline; background-color: aquamarine; } .span-inline-block { display: block; background-color: blueviolet; width: 300px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 style=&quot;font: bolder 50px 'KaiTi';&quot;&gt;这是一个 font复合属性示例&lt;/h1&gt; &lt;p style=&quot;line-height: 40px;&quot;&gt; 这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本这是一段长文本 &lt;/p&gt; &lt;div class=&quot;block&quot;&gt;这是一个块级元素&lt;/div&gt; &lt;span class=&quot;inline&quot;&gt;这是一个行内元素&lt;/span&gt; &lt;img src=&quot;001.png&quot; alt=&quot;&quot; class=&quot;inline-block&quot;&gt; &lt;img src=&quot;001.png&quot; alt=&quot;&quot; class=&quot;inline-block&quot;&gt; &lt;img src=&quot;001.png&quot; alt=&quot;&quot; class=&quot;inline-block&quot;&gt; &lt;img src=&quot;001.png&quot; alt=&quot;&quot; class=&quot;inline-block&quot;&gt; &lt;h2&gt;display&lt;/h2&gt; &lt;div class=&quot;div-inline&quot;&gt;这是一个转换成行内元素的div标签&lt;/div&gt; &lt;span class=&quot;span-inline-block&quot;&gt;这是一个转换成行内块元素的span标签&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; CSS盒子模型1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;CSS盒子模型&lt;/title&gt; &lt;style&gt; .demo { background-color: aqua; display: inline-block; /* border(边界/边框) 上右下左 */ border: 50px solid yellowgreen; /* padding(内边距) 内容与边框的距离 */ padding: 50px 10px 30px 100px; /* margin(外边距) 盒子与浏览器之间的距离 */ margin: 40px 10px 30px 100px; } .border-demo { background-color: yellow; width: 300px; height: 200px; padding: 50px 10px 30px 100px; border-style: solid; border-width: 10px 20px 20px 40px; border-color: blueviolet; margin: 40px 10px 30px 100px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;demo&quot;&gt;galendu 站搜索galendu&lt;/div&gt; &lt;div class=&quot;demo&quot;&gt;github.com 搜索galendu&lt;/div&gt; &lt;div class=&quot;border-demo&quot;&gt;这是一个边框示例&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; CSS浮动12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;CSS浮动&lt;/title&gt; &lt;style&gt; .father { background-color: aquamarine; border: 10px solid brown; } .father::after { display: table; clear: both; } .left-son { width: 100px; height: 100px; background-color: yellowgreen; float: left; } .right-son { width: 100px; height: 100px; background-color: yellowgreen; float: right; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;left-son&quot;&gt;左浮动&lt;/div&gt; &lt;div class=&quot;right-son&quot;&gt;右浮动&lt;/div&gt; &lt;/div&gt; &lt;p&gt;这是一段文本这是一段文本这是一段文本这是一段文本这是一段文本这是一段文本这是一段文本这是一段文本这是一段文本这是一段文本&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 定位12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;定位&lt;/title&gt; &lt;style&gt; .box1 { height: 350px; background-color: aqua; } .box-normal { width: 100px; height: 100px; background-color: purple; } .box-relative { width: 100px; height: 100px; background-color: pink; /* position 属性设置元素在文档中的定位方式 */ position: relative; left: 120px; top: 40px; } .box2 { height: 350px; background-color: yellow; margin-bottom: 300px; } .box-absolute { width: 100px; height: 100px; background-color: red; position: absolute; left: 220px; top: 400px; } .box-fixed { width: 100px; height: 100px; background-color: brown; position: fixed; right: 0; top: 300px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;相对定位&lt;/h1&gt; &lt;div class=&quot;box1&quot;&gt; &lt;div class=&quot;box-normal&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box-relative&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box-normal&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;h1&gt;绝对定位&lt;/h1&gt; &lt;div class=&quot;box2&quot;&gt; &lt;div class=&quot;box-normal&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box-absolute&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box-norma&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;h1&gt;固定定位&lt;/h1&gt; &lt;div class=&quot;box-fixed&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; JS导入方式 内联样式 123&lt;script&gt; console.log('Hello, Head 标签的内联样式')&lt;/script&gt; 外联样式 1&lt;script src=&quot;./js/myscript.js&quot;&gt;&lt;/script&gt; 12// js/myscript.jsconsole.log('Hello, 外联样式') JS基础语法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;script&gt; // 1. 定义变量 var x; let y = 5; const PI = 3.14 console.log(x, y, PI); // 2. 打印 let name = '如花'; console.log(name); let empty_value = null; console.log(empty_value); // 3. 控制语句 let age = 18; if (age &gt; 18) { console.log('你已经成年了') } else { console.log('未成年') } // let time = 18; // if (time &lt; 12) { // alert('上午好') // } else if (time &lt; 18) { // alert('下午好') // } else { // alert('晚上好') // } console.log('for 循环') for (let i = 1; i &lt; 10; i++) { console.log(i) } console.log('while 循环') let count = 1 while (count &lt;= 10) { console.log(count) count++; } for (var i = 0; i &lt; 5; i++) { if (i == 2) { continue; } if (i == 4) { break; } console.log(i); }&lt;/script&gt; JS函数12345678910111213141516171819202122232425262728&lt;script&gt; function hello() { console.log('Hello, world'); } hello() function hello_with_return() { return &quot;hello, world - 返回值&quot; } let a = hello_with_return() console.log(a) function hello_with_params(name) { console.log('hello, ' + name); } hello_with_params('如花') // 作用域 let global_var = '全局变量' function local_var_function() { let local_var = '局部变量' console.log('函数内打印全局变量: ' + global_var); console.log('函数内打印局部变量: ' + local_var); } local_var_function() console.log('函数内打印全局变量: ' + global_var); console.log('函数内打印局部变量: ' + local_var);&lt;/script&gt; JS事件12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;JS 事件&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;button onclick=&quot;click_event()&quot;&gt;这是一个点击事件按钮&lt;/button&gt; &lt;input type=&quot;text&quot; onfocus=&quot;focus_event()&quot; onblur=&quot;blur_event()&quot; name=&quot;&quot; id=&quot;&quot;&gt; &lt;script&gt; // 点击事件 function click_event() { alert('点击事件触发了'); } // 聚焦事件 function focus_event() { console.log('获取焦点') } // 失去焦点事件 function blur_event() { console.log('失去焦点') } &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; JS DOM12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;DOM&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;box1&quot;&gt;这是一个ID选择器标签&lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;这是一个类选择器标签&lt;/div&gt; &lt;div&gt;普通的div 标签&lt;/div&gt; &lt;button&gt;点击按钮&lt;/button&gt; &lt;script&gt; var element_id = document.getElementById('box1'); console.log(element_id); var element_class = document.getElementsByClassName('box2')[0]; console.log(element_class); var element_tag = document.getElementsByTagName('div')[2]; console.log(element_tag) element_id.innerHTML = '&lt;a href=&quot;#&quot;&gt;跳转链接&lt;/a&gt;'; element_class.innerText = '&lt;a href=&quot;#&quot;&gt;跳转链接&lt;/a&gt;'; element_tag.style.color = &quot;red&quot; element_tag.style.fontSize = '20px' // DOM 属性绑定事件 var button_element = document.getElementsByTagName('button')[0]; console.log(button_element); // button_element.onclick = function () { // alert('DOM 属性 按键触发'); // } button_element.addEventListener('click', click_event) function click_event() { alert('通过 addEventListener 触发按键'); } &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 练习-表格的增删改查123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;练习-表格的增删改查&lt;/title&gt; &lt;style&gt; table { width: 100%; border-collapse: collapse; margin-top: 20px; } th, td { border: 1px solid #ddd; text-align: center; padding: 8px; } th { background-color: #ddd; } button { margin-left: 5px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 style=&quot;text-align:center;&quot;&gt;表格的增删改查&lt;/h1&gt; &lt;button onclick=&quot;addRow()&quot;&gt;新增数据&lt;/button&gt; &lt;table id=&quot;table&quot;&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;联系方式&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;杜潇&lt;/td&gt; &lt;td&gt;12345678901&lt;/td&gt; &lt;td&gt; &lt;button onclick=&quot;editRow(this)&quot;&gt;编辑&lt;/button&gt;&lt;button onclick=&quot;deleteRow(this)&quot;&gt;删除&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;script src=&quot;./js/table.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344//新增数据函数function addRow() { var table = document.getElementById('table'); // console.log(table); //获取插入的位置 var length = table.rows.length; // console.log(length); //插入行节点 var newRow = table.insertRow(length); console.log(newRow); // newRow.innerHTML = '123456' // 插入列节点对象 var nameCol = newRow.insertCell(0); var phoneCol = newRow.insertCell(1); var actionCol = newRow.insertCell(2); nameCol.innerHTML = '未命名'; phoneCol.innerHTML = '无联系方式'; actionCol.innerHTML = '&lt;button onclick=&quot;editRow(this)&quot;&gt;编辑&lt;/button&gt;&lt;button onclick=&quot;deleteRow(this)&quot;&gt;删除&lt;/button&gt;'; console.log(newRow);}// 删除数据函数function deleteRow(button) { var row = button.parentNode.parentNode; console.log(row) row.parentNode.removeChild(row);}// 编辑数据function editRow(button) { var row = button.parentNode.parentNode; var name = row.cells[0]; var phone = row.cells[1]; var inputName = prompt('请输入名字：'); var inputPhone = prompt('请输入联系方式: '); name.innerHTML = inputName; phone.innerHTML = inputPhone;} 移动端适配及rem1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;移动端适配及rem&lt;/title&gt; &lt;style&gt; /* html { font-size: 50px; } */ .box-px { width: 300px; height: 100px; background-color: blueviolet; margin-bottom: 50px; } .box-rem { width: 5rem; height: 3rem; background-color: aqua; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box-px&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box-rem&quot;&gt;&lt;/div&gt; &lt;script&gt; // 根据社保宽度计算 HTML标签的 font-size 的属性值 function resetHtmlFontSize() { document.documentElement.style.fontSize = screen / 10 + 'px'; } resetHtmlFontSize() // 绑定事件 window.onresize = resetHtmlFontSize; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Flex 弹性盒子与容器属性123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Flex 盒子模型&lt;/title&gt; &lt;style&gt; html { font-size: 10px; } .container { display: flex; height: 40rem; background-color: aqua; /* flex-direction: column-reverse; */ flex-wrap: wrap; /* justify-content: space-evenly; */ align-items: center; align-content: center; } .item { width: 20rem; font-size: 8rem; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;item&quot; style=&quot;background-color: yellowgreen;&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot; style=&quot;background-color: whitesmoke;&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot; style=&quot;background-color: rebeccapurple;&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot; style=&quot;background-color: blanchedalmond&quot;&gt;4&lt;/div&gt; &lt;div class=&quot;item&quot; style=&quot;background-color: purple;&quot;&gt;5&lt;/div&gt; &lt;div class=&quot;item&quot; style=&quot;background-color: yellow;&quot;&gt;6&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","link":"/posts/38645.html"},{"title":"前端基础-CSS基础","text":"概述 前端基础-CSS基础 正文CSS选择器CSS 选择器是 CSS 规则的第一部分。它是元素和其他部分组合起来告诉浏览器哪个 HTML 元素应当是被选为应用规则中的 CSS 属性值的方式。选择器所选择的元素，叫做“选择器的对象”。 选择器的种类:类型、类和 ID 选择器 123456789/* 类型 */h1 {}/* 类 */.xxx{}/* ID选择器 */#xxx{} 标签属性选择器 1234/* 根据一个元素上的某个标签的属性的存在以选择元素的不同方式 */a[title] {}/* 根据一个有特定值的标签属性是否存在来选择 */a[href=&quot;https://example.com&quot;] {} 伪类与伪元素 12345/* 伪类:用来样式化一个元素的特定状态. :hover伪类会在鼠标指针悬浮到一个元素上的时候选择这个元素 */a:hover{}/* 伪元素:选择一个元素的某个部分而不是元素自己. ::first-line是会选择一个元素(&lt;p&gt;)中的第一行,类似&lt;span&gt;包在了第一个被格式化的外面,然后选择这个&lt;span&gt; */p::first-line{} 运算符将其它选择器组合起来,更辅助的选择元素. (&gt;)选择了&lt;xxx&gt;元素的初代子元素 12article &gt;p {} 类型、类和ID选择器 类型12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576类型选择器,也叫&quot;标签名选择器/元素选择器&quot;span { background-color: yellow;}strong { color: rebeccapurple;}em { color: rebeccapurple;}/* 全局选择器* */* {margin: 0;}/* xx元素的第一个子元素 */xx :first-child{};xx *:first-child{};``` - 类选择器 ```css.highlight { background-color: yellow;}/* &lt;h1 class=&quot;highlight&quot;&gt;Class selectors&lt;/h1&gt;&lt;p&gt;Veggies es bonus vobis, proinde vos postulo essum magis &lt;span class=&quot;highlight&quot;&gt;kohlrabi welsh onion&lt;/span&gt; daikon amaranth tatsoi tomatillo melon azuki bean garlic.&lt;/p&gt;&lt;p class=&quot;highlight&quot;&gt;Gumbo beet greens corn soko &lt;strong&gt;endive&lt;/strong&gt; gumbo gourd. Parsley shallot courgette tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.&lt;/p&gt; *//* 指向特定元素的类 */span.highlight { background-color: yellow;}h1.highlight { background-color: pink;}/* 多个类被应用的时候指向一个元素 */.notebox { border: 4px solid #666; padding: .5em;}.notebox.warning { border-color: orange; font-weight: bold;}.notebox.danger { border-color: red; font-weight: bold;}/* &lt;div class=&quot;notebox&quot;&gt; This is an informational note.&lt;/div&gt;&lt;div class=&quot;notebox warning&quot;&gt; This note shows a warning.&lt;/div&gt;&lt;div class=&quot;notebox danger&quot;&gt; This note shows danger!&lt;/div&gt;&lt;div class=&quot;danger&quot;&gt; This won't get styled — it also needs to have the notebox class&lt;/div&gt; */ ID选择器 1234567#one { background-color: yellow;}h1#heading { color: rebeccapurple;} 属性选择器 选择器的值是否存在 选择器 示例 描述 [attr] a[title] 匹配一个名为title的属性的元素 [attr=value] a[href=”","link":"/posts/a5207128.html"},{"title":"前端基础-文档与网站架构","text":"概述 前端基础-文档与网站架构 正文文档的基本组成部分页眉: 通常横跨于整个页面顶部有一个大标题和/或一个标志。这是网站的主要一般信息，通常存在于所有网页。 导航栏: 指向网站各个主要区段的超链接。通常用菜单按钮、链接或标签页表示。类似于标题栏，导航栏通常应在所有网页之间保持一致，否则会让用户感到疑惑，甚至无所适从。许多 web 设计人员认为导航栏是标题栏的一部分，而不是独立的组件，但这并非绝对；还有人认为，两者独立可以提供更好的无障碍访问特性，因为屏幕阅读器可以更清晰地分辨二者。 主内容: 中心的大部分区域是当前网页大多数的独有内容,例如视频、文章、地图、新闻等。这些内容是网站的一部分，且会因页面而已。 侧边栏：一些外围信息、链接、引用、广告等。通常与主内容相关（例如一个新闻页面上，侧边栏可能包含坐着信息或相关文章链接），还可能存在其他的重复元素，如辅助导航系统。 页脚：横跨页面底部的狭长区域。和标题一样，页脚是放置公共信息（比如版权声明或联系方式）的，一般使用较小字体，且通常为次要内容。还可以通过提供快速访问链接来进行 SEO。 用于构建内容的HTML12345- &lt;header&gt;: 页眉- &lt;nav&gt;: 导航栏 - &lt;main&gt;: 主内容。主内容中还可以有各种字内容区段,可用&lt;article&gt; &lt;section&gt; 和 &lt;div&gt;等元素表示。- &lt;aside&gt;: 侧边栏,经常嵌套在\\&lt;main&gt;中- &lt;footer&gt;: 页脚 示例代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;二次元俱乐部&lt;/title&gt; &lt;link href=&quot;https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One&quot; rel=&quot;stylesheet&quot; /&gt; &lt;link href=&quot;https://fonts.googleapis.com/css?family=ZCOOL+KuaiLe&quot; rel=&quot;stylesheet&quot; /&gt; &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; /&gt;&lt;/head&gt;&lt;body&gt; &lt;header&gt; &lt;!-- 本站所有网页的统一主标题 --&gt; &lt;h1&gt;聆听电子天籁之音&lt;/h1&gt; &lt;/header&gt; &lt;nav&gt; &lt;!-- 本站统一的导航栏 --&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;主页&lt;/a&gt;&lt;/li&gt; &lt;!-- 共 n 个导航栏项目，省略…… --&gt; &lt;/ul&gt; &lt;form&gt; &lt;!-- 搜索栏是站点内导航的一个非线性的方式。 --&gt; &lt;input type=&quot;search&quot; name=&quot;q&quot; placeholder=&quot;要搜索的内容&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;搜索&quot; /&gt; &lt;/form&gt; &lt;/nav&gt; &lt;main&gt; &lt;!-- 网页主体内容 --&gt; &lt;article&gt; &lt;!-- 此处包含一个 article（一篇文章），内容略…… --&gt; &lt;/article&gt; &lt;aside&gt; &lt;!-- 侧边栏在主内容右侧 --&gt; &lt;h2&gt;相关链接&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;这是一个超链接&lt;/a&gt;&lt;/li&gt; &lt;!-- 侧边栏有 n 个超链接，略略略…… --&gt; &lt;/ul&gt; &lt;/aside&gt; &lt;/main&gt; &lt;footer&gt; &lt;!-- 本站所有网页的统一页脚 --&gt; &lt;p&gt;© 2050 某某保留所有权利&lt;/p&gt; &lt;/footer&gt;&lt;/body&gt;&lt;/html&gt; HTML布局元素细节 https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element 1234567&lt;main&gt; 存放每个页面独有的内容。每个页面上只能用一次 &lt;main&gt;，且直接位于 &lt;body&gt; 中。最好不要把它嵌套进其他元素。&lt;article&gt; 包围的内容即一篇文章，与页面其他部分无关（比如一篇博文）。&lt;section&gt; 与 &lt;article&gt; 类似，但 &lt;section&gt; 更适用于组织页面使其按功能（比如迷你地图、一组文章标题和摘要）分块。一般的最佳用法是：以 标题 作为开头；也可以把一篇 &lt;article&gt; 分成若干部分并分别置于不同的 &lt;section&gt; 中，也可以把一个区段 &lt;section&gt; 分成若干部分并分别置于不同的 &lt;article&gt; 中，取决于上下文。&lt;aside&gt; 包含一些间接信息（术语条目、作者简介、相关链接，等等）。&lt;header&gt; 是简介形式的内容。如果它是 &lt;body&gt; 的子元素，那么就是网站的全局页眉。如果它是 &lt;article&gt; 或&lt;section&gt; 的子元素，那么它是这些部分特有的页眉（此 &lt;header&gt; 非彼 标题）。&lt;nav&gt; 包含页面主导航功能。其中不应包含二级链接等内容。&lt;footer&gt; 包含了页面的页脚部分。 构建网页内容 https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content Mozilla多设备兼容配置 https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page 为 header 添加一个图标 为主 article 添加一个视频 为 further info 的链接添加响应式图片 一张小熊猫的艺术照","link":"/posts/54376.html"},{"title":"前端基础-表格","text":"概述 前端基础-表格。 正文表格基础12345678910分组: tr 添加内容: td添加标题: th行合并: rowspan列合并: colspan定义整列样式: col 和 colgroup表格增加一个标题: caption 单元格占用多个单元格: colspan scope属性123456789101112131415161718&lt;thead&gt; &lt;tr&gt; &lt;th scope=&quot;col&quot;&gt;Purchase&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;Location&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;Date&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;Evaluation&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;Cost (€)&lt;/th&gt; &lt;/tr&gt;&lt;tr&gt; &lt;th scope=&quot;row&quot;&gt;Haircut&lt;/th&gt; &lt;td&gt;Hairdresser&lt;/td&gt; &lt;td&gt;12/09&lt;/td&gt; &lt;td&gt;Great idea&lt;/td&gt; &lt;td&gt;30&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt; header123456789101112131415161718&lt;thead&gt; &lt;tr&gt; &lt;th id=&quot;purchase&quot;&gt;Purchase&lt;/th&gt; &lt;th id=&quot;location&quot;&gt;Location&lt;/th&gt; &lt;th id=&quot;date&quot;&gt;Date&lt;/th&gt; &lt;th id=&quot;evaluation&quot;&gt;Evaluation&lt;/th&gt; &lt;th id=&quot;cost&quot;&gt;Cost (€)&lt;/th&gt; &lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt; &lt;tr&gt; &lt;th id=&quot;haircut&quot;&gt;Haircut&lt;/th&gt; &lt;td headers=&quot;location haircut&quot;&gt;Hairdresser&lt;/td&gt; &lt;td headers=&quot;date haircut&quot;&gt;12/09&lt;/td&gt; &lt;td headers=&quot;evaluation haircut&quot;&gt;Great idea&lt;/td&gt; &lt;td headers=&quot;cost haircut&quot;&gt;30&lt;/td&gt; &lt;/tr&gt;&lt;/tbody&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en-US&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt; &lt;title&gt;School timetable&lt;/title&gt; &lt;style&gt; html { font-family: sans-serif; } table { border-collapse: collapse; border: 2px solid rgb(200, 200, 200); letter-spacing: 1px; font-size: 0.8rem; } td, th { border: 1px solid rgb(190, 190, 190); padding: 10px 20px; } td { text-align: center; } caption { padding: 10px; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;School timetable&lt;/h1&gt; &lt;table&gt; &lt;colgroup&gt; &lt;col&gt; &lt;col&gt; &lt;col style=&quot;background-color: #97DB9A;&quot;&gt; &lt;/colgroup&gt; &lt;colgroup&gt; &lt;col style=&quot;width: 42px;&quot; /&gt; &lt;/colgroup&gt; &lt;colgroup&gt; &lt;col style=&quot;background-color: #97DB9A;&quot; /&gt; &lt;/colgroup&gt; &lt;colgroup&gt; &lt;col style=&quot;background-color:#DCC48E; border:4px solid #C1437A;&quot;&gt; &lt;/colgroup&gt; &lt;colgroup&gt; &lt;col style=&quot;width: 42px;&quot; span=&quot;2&quot;&gt; &lt;/colgroup&gt; &lt;tr&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;th&gt;Mon&lt;/th&gt; &lt;th&gt;Tues&lt;/th&gt; &lt;th&gt;Wed&lt;/th&gt; &lt;th&gt;Thurs&lt;/th&gt; &lt;th&gt;Fri&lt;/th&gt; &lt;th&gt;Sat&lt;/th&gt; &lt;th&gt;Sun&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;1st period&lt;/th&gt; &lt;td&gt;English&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;German&lt;/td&gt; &lt;td&gt;Dutch&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;2nd period&lt;/th&gt; &lt;td&gt;English&lt;/td&gt; &lt;td&gt;English&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;German&lt;/td&gt; &lt;td&gt;Dutch&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;3rd period&lt;/th&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;German&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;German&lt;/td&gt; &lt;td&gt;Dutch&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;4th period&lt;/th&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;English&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;English&lt;/td&gt; &lt;td&gt;Dutch&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 练习-构建行星数据 https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Tables/Structuring_planet_data 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;太阳系行星数据&lt;/title&gt; &lt;link href=&quot;styles/style82.css&quot; rel=&quot;stylesheet&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;太阳系行星数据&lt;/h1&gt; &lt;table&gt; &lt;caption&gt;太阳系中行星的一些数据。（资料取自&lt;a href=&quot;http://nssdc.gsfc.nasa.gov/planetary/factsheet/&quot;&gt;NASA 行星数据 - 公制&lt;/a&gt;，图片取自&lt;a href=&quot;https://www.nasa.gov/multimedia/imagegallery/&quot;&gt;NASA 照片库&lt;/a&gt;。）&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;th colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;名字&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;图片&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;质量 (10&lt;sup&gt;24&lt;/sup&gt;kg)&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;直径 (km)&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;密度 (kg/m&lt;sup&gt;3&lt;/sup&gt;)&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;重力 (m/s&lt;sup&gt;2&lt;/sup&gt;)&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;天长 (hours)&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;与太阳距离 (10&lt;sup&gt;6&lt;/sup&gt;km)&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;平均温度 (°C)&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;卫星数据&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;备注&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th colspan=&quot;2&quot; rowspan=&quot;4&quot;&gt;类地行星&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;水星&lt;/th&gt; &lt;td&gt; &lt;img src=&quot;https://roy-tian.github.io/learning-area/html/tables/assessment-finished/images/mercury.jpg&quot; alt=&quot;&quot;&gt; &lt;/td&gt; &lt;td&gt;0.330&lt;/td&gt; &lt;td&gt;4,879&lt;/td&gt; &lt;td&gt;5427&lt;/td&gt; &lt;td&gt;3.7&lt;/td&gt; &lt;td&gt;4222.6&lt;/td&gt; &lt;td&gt;57.9&lt;/td&gt; &lt;td&gt;167&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;与太阳最近&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!-- &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt; --&gt; &lt;th scope=&quot;col&quot;&gt;金星&lt;/th&gt; &lt;td&gt; &lt;img src=&quot;https://roy-tian.github.io/learning-area/html/tables/assessment-finished/images/venus.jpg&quot; alt=&quot;&quot;&gt; &lt;/td&gt; &lt;td&gt;0.330&lt;/td&gt; &lt;td&gt;4,879&lt;/td&gt; &lt;td&gt;5427&lt;/td&gt; &lt;td&gt;3.7&lt;/td&gt; &lt;td&gt;4222.6&lt;/td&gt; &lt;td&gt;57.9&lt;/td&gt; &lt;td&gt;167&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;与太阳最近&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!-- &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt; --&gt; &lt;th scope=&quot;col&quot;&gt;地球&lt;/th&gt; &lt;td&gt; &lt;img src=&quot;https://roy-tian.github.io/learning-area/html/tables/assessment-finished/images/earth.png&quot; alt=&quot;&quot;&gt; &lt;/td&gt; &lt;td&gt;0.330&lt;/td&gt; &lt;td&gt;4,879&lt;/td&gt; &lt;td&gt;5427&lt;/td&gt; &lt;td&gt;3.7&lt;/td&gt; &lt;td&gt;4222.6&lt;/td&gt; &lt;td&gt;57.9&lt;/td&gt; &lt;td&gt;167&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;与太阳最近&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!-- &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt; --&gt; &lt;th scope=&quot;col&quot;&gt;火星&lt;/th&gt; &lt;td&gt; &lt;img src=&quot;https://roy-tian.github.io/learning-area/html/tables/assessment-finished/images/mars.jpg&quot; alt=&quot;&quot;&gt; &lt;/td&gt; &lt;td&gt;0.330&lt;/td&gt; &lt;td&gt;4,879&lt;/td&gt; &lt;td&gt;5427&lt;/td&gt; &lt;td&gt;3.7&lt;/td&gt; &lt;td&gt;4222.6&lt;/td&gt; &lt;td&gt;57.9&lt;/td&gt; &lt;td&gt;167&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;与太阳最近&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th rowspan=&quot;4&quot;&gt;类木行星;&lt;/th&gt; &lt;th rowspan=&quot;2&quot;&gt;气巨星&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;木星&lt;/th&gt; &lt;td&gt; &lt;img src=&quot;https://roy-tian.github.io/learning-area/html/tables/assessment-finished/images/jupiter.jpg&quot; alt=&quot;&quot;&gt; &lt;/td&gt; &lt;td&gt;0.330&lt;/td&gt; &lt;td&gt;4,879&lt;/td&gt; &lt;td&gt;5427&lt;/td&gt; &lt;td&gt;3.7&lt;/td&gt; &lt;td&gt;4222.6&lt;/td&gt; &lt;td&gt;57.9&lt;/td&gt; &lt;td&gt;167&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;与太阳最近&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!-- &lt;td&gt;&amp;nbsp;&lt;/td&gt; --&gt; &lt;th scope=&quot;col&quot;&gt;土星&lt;/th&gt; &lt;td&gt; &lt;img src=&quot;https://roy-tian.github.io/learning-area/html/tables/assessment-finished/images/saturn.jpg&quot; alt=&quot;&quot;&gt; &lt;/td&gt; &lt;td&gt;0.330&lt;/td&gt; &lt;td&gt;4,879&lt;/td&gt; &lt;td&gt;5427&lt;/td&gt; &lt;td&gt;3.7&lt;/td&gt; &lt;td&gt;4222.6&lt;/td&gt; &lt;td&gt;57.9&lt;/td&gt; &lt;td&gt;167&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;与太阳最近&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!-- &lt;td&gt;&amp;nbsp;&lt;/td&gt; --&gt; &lt;th rowspan=&quot;2&quot;&gt;冰巨星&lt;/th&gt; &lt;th scope=&quot;col&quot;&gt;天王星&lt;/th&gt; &lt;td&gt; &lt;img src=&quot;https://roy-tian.github.io/learning-area/html/tables/assessment-finished/images/uranus.jpg&quot; alt=&quot;&quot;&gt; &lt;/td&gt; &lt;td&gt;0.330&lt;/td&gt; &lt;td&gt;4,879&lt;/td&gt; &lt;td&gt;5427&lt;/td&gt; &lt;td&gt;3.7&lt;/td&gt; &lt;td&gt;4222.6&lt;/td&gt; &lt;td&gt;57.9&lt;/td&gt; &lt;td&gt;167&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;与太阳最近&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!-- &lt;td&gt;&amp;nbsp;&lt;/td&gt; --&gt; &lt;!-- &lt;td&gt;&amp;nbsp;&lt;/td&gt; --&gt; &lt;th scope=&quot;col&quot;&gt;海王星&lt;/th&gt; &lt;td&gt; &lt;img src=&quot;https://roy-tian.github.io/learning-area/html/tables/assessment-finished/images/neptune.jpg&quot; alt=&quot;&quot;&gt; &lt;/td&gt; &lt;td&gt;0.330&lt;/td&gt; &lt;td&gt;4,879&lt;/td&gt; &lt;td&gt;5427&lt;/td&gt; &lt;td&gt;3.7&lt;/td&gt; &lt;td&gt;4222.6&lt;/td&gt; &lt;td&gt;57.9&lt;/td&gt; &lt;td&gt;167&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;与太阳最近&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th colspan=&quot;2&quot;&gt;矮行星&lt;/th&gt; &lt;!-- &lt;td&gt;&amp;nbsp;&lt;/td&gt; --&gt; &lt;th scope=&quot;col&quot;&gt;冥王星&lt;/th&gt; &lt;td&gt; &lt;img src=&quot;https://roy-tian.github.io/learning-area/html/tables/assessment-finished/images/pluto.jpg&quot; alt=&quot;&quot;&gt; &lt;/td&gt; &lt;td&gt;0.330&lt;/td&gt; &lt;td&gt;4,879&lt;/td&gt; &lt;td&gt;5427&lt;/td&gt; &lt;td&gt;3.7&lt;/td&gt; &lt;td&gt;4222.6&lt;/td&gt; &lt;td&gt;57.9&lt;/td&gt; &lt;td&gt;167&lt;/td&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;与太阳最近&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; styles/style82.css文件 1234567891011121314151617181920212223242526272829303132333435html { font-family: sans-serif; } table { border-collapse: collapse; border: 2px solid rgb(200,200,200); letter-spacing: 1px; font-size: 0.8rem; } td, th { border: 1px solid rgb(190,190,190); padding: 10px 20px; } th { background-color: rgb(235,235,235); } td { text-align: center; } tr:nth-child(even) td { background-color: rgb(250,250,250); } tr:nth-child(odd) td { background-color: rgb(245,245,245); } caption { padding: 10px; }","link":"/posts/14414.html"},{"title":"前端实践-密码验证","text":"前端实践-密码验证 静态文件1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;title&gt;Password Verification&lt;/title&gt;&lt;style&gt; body { font-family: Arial, sans-serif; text-align: center; } input[type=&quot;password&quot;] { padding: 10px; margin: 10px; } button { padding: 10px 20px; margin: 10px; cursor: pointer; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h2&gt;Password Verification&lt;/h2&gt;&lt;input type=&quot;password&quot; id=&quot;password&quot; placeholder=&quot;Enter password&quot;&gt;&lt;button onclick=&quot;verifyPassword()&quot;&gt;Verify Password&lt;/button&gt;&lt;p id=&quot;message&quot;&gt;&lt;/p&gt;&lt;script&gt; function verifyPassword() { var password = document.getElementById(&quot;password&quot;).value; // 这里可以自定义你的密码验证逻辑 if (password === &quot;MyPassword&quot;) {window.location.href = &quot;14qBrMavy2pW9umzuhd7eMDVpwQ62xRtPK.html&quot;; // document.getElementById(&quot;message&quot;).innerHTML = &quot;Password is correct!&quot;; } else { document.getElementById(&quot;message&quot;).innerHTML = &quot;Incorrect password. Please try again.&quot;; } }&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","link":"/posts/a4c6a2c2.html"},{"title":"善用chatgpt","text":"概述 利用ChatGPT进行文档分析和处理可以极大地提高论文知识管理的效率和质量。 为文章生成合适的摘要 “一段一段分析文章中提供了什么解决方法” “根据问题，列出摘要文章重点” 使用Claude AI分析PDF、Word长篇文件资料 https://claude.ai/ 特点 一次性分析多份文件档案,大量文字内容 进行针对性的深入问答 回答是可以附上引用链接 chatgpt推荐使用的插件 webpilot: 主动搜索相关研究资料 Chat with video: 分析线上PDF摘要 Consensus: 论文搜寻与摘要 Whimsical: 绘制流程图 假如你要写一份报告,脑中一片空白,怎样快速准备报告想法?假设你是一位知识管理专家，我要写一份关于「如何做好论文知识管理」的报告，请建议报告的大纲。 请一步一步分析，先尽量详细的告诉我「如何做好论文知识管理」的基本知识，然后提出实际执行时建议的规划方向，以及具体列出可能遭遇的问题。 快速语音转文字请帮我整理下方逐字稿,修正错字与不通顺,但尽量保留原文","link":"/posts/25932.html"},{"title":"嫁接","text":"概述 常用的嫁接方法。https://www.youtube.com/watch?v=U2408cZHc8g 嫁接月季常用的四种方法插皮接 嵌芽接 T型芽接 切接 嫁接果树常用的方法 https://www.youtube.com/watch?v=fvYUoK1EHD0","link":"/posts/b8a1afb.html"},{"title":"学习工作辅助站点","text":"通过动画可视化数据结构和算法 通过动画可视化数据结构和算法 https://visualgo.net/zh/ 转换工具 https://www.aspose.app/zh/https://tool.lu/ nerdctl容器操作工具 https://docs.youdianzhishi.com/k8s/runtime/nerdctl/ youtube视频下载 视频右击,复制视频链接 在新的页面输入sfrom.net/加上面复制的视频链接","link":"/posts/1968.html"},{"title":"扦插","text":"概述 扦插技巧以及案例。 正文扦插注意事项1.不要老枝条或新枝(太嫩的),半木质化枝条2.土(干净,透气保湿),育苗扦插土或蛭石椰糠3.浇对水,土质不干就行,不需要每天都浇水,2-3天浇一次4.半阴光照5.温度(20-25度)6.长度7-10cm7.上端平剪,下端45度8.剪刀枝条低端进行消毒(酒精或高锰酸钾) 案例油画扦插1.保留两个芽点,一个埋入土中,另一个芽点上的叶子保留一到两片(半片)2.土使用通用的扦插土即可","link":"/posts/aa5c17f8.html"},{"title":"测试文档","text":"概述 测试文档。 文档编写自定义Hexo标签插件 https://ppoffice.github.io/hexo-theme-icarus/uncategorized/%E8%87%AA%E5%AE%9A%E4%B9%89hexo%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6/#tab_icon_1 消息123{% message color:&lt;颜色&gt; size:&lt;大小&gt; icon:&lt;图标&gt; title:&lt;标题&gt; %} &lt;内容&gt;{% endmessage %} 标签页 参数释义 123456789{% tabs size:&lt;大小&gt; align:&lt;对齐&gt; style:&lt;样式&gt; %}&lt;!-- tab id:&lt;标签ID&gt; icon:&lt;图标&gt; title:&lt;标签标题&gt; active --&gt;&lt;标签内容&gt;&lt;!-- endtab --&gt;&lt;!-- tab id:&lt;标签ID&gt; icon:&lt;图标&gt; title:&lt;标签标题&gt; --&gt;&lt;标签内容&gt;&lt;!-- endtab --&gt;...{% endtabs %} 消息块1 消息块 1234{% message color:danger size:small %} 消息块1{% endmessage %} 消息块2 消息 消息块2。 1234{% message color:success size:medium icon:fa-brands fa-node-js title:消息 %} 消息块2。{% endmessage %} 消息块3 消息 消息块3。 123{% message color:info size:medium icon:fa-brands fa-node-js title:消息 %} 消息块3。{% endmessage %} 标签容器12345678{% tabs align:left size:medium style:boxed %}&lt;!-- tab id:windows &quot;icon:fa-brands fa-windows&quot; title:windows active --&gt;windows安装 &lt;!-- endtab --&gt;&lt;!-- tab id:linux &quot;icon:fa-brands fa-linux&quot; title:linux --&gt;linux安装 &lt;!-- endtab --&gt; {% endtabs %} windows linux windows安装 linux安装 markdown编写 https://markdown.com.cn/ 标题语法1234Heading level 1===============Heading level 2--------------- 强调语法12斜体***斜体*** 粗体**粗体** 斜体斜体粗体粗体 引用语法123&gt;引用语法&gt;&gt;换行 引用语法 换行 嵌套引用123&gt;引用语法&gt;&gt;&gt;嵌套块引用 引用语法 嵌套块引用 带有其它元素的块引用12345&gt;引用语法&gt;&gt;&gt;嵌套块引用&gt; - 块引用1&gt; - 块引用2 引用语法 嵌套块引用 块引用1 块引用2 插入链接这是一个链接 Markdown语法。 1这是一个链接 [Markdown语法](https://markdown.com.cn)。 插入图片1![这是本地图片](/img/philly-magic-garden.jpg &quot;Magic Gardens&quot;) 1![在线图片](https://galendu.github.io/img/philly-magic-garden.jpg) 插入视频","link":"/posts/42688.html"},{"title":"生活养花","text":"养花 本文。 土的选择配土1. 土的选择原土(带砂质的土也可以,微量元素比较天然)堆肥土火山岩黑色/红色 2. 配土的特点附根性、保水性、透气性、各种矿物元素微量元素的保证 3. 盆栽的配土方式原土 2杯堆肥土 2杯火山岩黑色/红色 1杯 4. 盆子的选择陶盆 5. 扦插用的土比例 椰糠 3杯沙子 3杯珍珠岩 1杯蛭石 1杯","link":"/posts/8534857.html"},{"title":"运维工程师面试题一","text":"概述 运维工程师面试题一 运维初试1、以下为一个正则表达式，请问它的含义是？^Sun[0-9][A-Z]x$ 以Sum开头,x结尾,中间为0-9或A-Z 2、data目录下有多层文件要求：修改data目录及其所有子文件的owner为 test，group为 testgroup chown -R test:testgroup data 3、当前路径下存在一个log目录，log目录下至少有4个层级的文件表示，每个层级的文件有不同类别要求：查找log目录下第二层最近5天内修改过的目录 find log -maxdepth 1 -type d -mtime -5 4、在机器上eth0网卡上抓来自192.168.9.73的包，目标的端口是10001，输出时打印包头和包的内容，不要转换地址。12345-i eth0：指定监听的网络接口是eth0。src 192.168.9.73：指定只捕获源IP地址为192.168.9.73的数据包。dst port 10001：指定只捕获目的端口为10001的数据包。-nn：禁止tcpdump对地址（IP地址和端口号）进行名称解析。-X：以十六进制和ASCII码同时显示数据包的内容，既包括包头也包括数据内容。 tcpdump -i eth0 src 192.168.9.73 and dst port 10001 -nn -X 5、使用crontab设置如下定时任务，并将stdin和stderr重定向到/dev/null：每天晚上22:15 执行/usr/bin/下的update.sh 每隔五分钟执行/usr/bin/的update.sh 1215 22 * * * /usr/bin/update.sh &gt;/dev/null 2&gt;&amp;1*/5 * * * * /usr/bin/update.sh &gt;/dev/null 2&gt;&amp;1 6、file文件的组外成员的权限为只读；所有者有全部权限；组内的权限为读与写，则该文件的权限为?rwx-rw-r 7、mysql 以test库为例，写出备份和恢复mysqldump -u user -p test&gt;test.bck.sqlmysqldump -u user -p test&lt;test.bck.sql 8、使用docker命令，以后台方式启动一个nginx容器，要求版本是：latest 可以通过host 80端口访问可以通过host 的/data/nginx目录访问nginx html目录 docker run -itd --name nginx -p 80:80 -v /data/nginx:/usr/share/nginx/html nginx:latest 9、K8S中使用deployment，部署3个实例的nginx，要求：版本是latest可以通过主机host 8080端口访问nginx服务也可以通过主机域名80端口访问nginx服务可以通过host的/data/nginx 目前访问nginx html目录。 10、脚步test.sh里内容如下：123456789101112#!/bin/bash# Name：test.sha=&quot;Good Luck&quot;b='$a'function test(){ local a=$1 b=$2;shift export c=$(eval echo $3)}test 10 20 30 $becho $a ${b} $c 解读代码含义并说出结果 a=”Good Luck”b=’$a’ $a为字符串执行test 10 20 30 $b的时候$b=’$a’ –&gt;test 10 20 30 ‘$a’test() 内部local a=$1为局部变量,不会改变外部的a=”Good Luck”b=$2 b=20,左移一位,删除第一个参数10 test 20 30 ‘$a’export定义环境变量,c=$(eval echo $3) eval 会将后面的代码扫描两次,第一次结果为$a,局部变量a=10,第二次扫描为10,c=10 结果: Good Luck 20 10 12345678910111213[root@jafardu ~]# bash -x aaa.sh + a='Good Luck'+ b='$a'+ test 10 20 30 '$a'+ local a=10+ b=20+ shift++ eval echo '$a'+++ echo 10+ export c=10+ c=10+ echo Good Luck 20 10Good Luck 20 10 11、有event表和work表分别如下1234567891011121314151617181920212223242526272829mysql&gt; select * from event limit 3; +------------+------+------+-------+ | event_time | type | uid | score | +------------+------+------+-------+ | 2013-04-01 | 1 | 2344 | 34 | | 2013-04-02 | 2 | 2122 | 21 | | 2013-04-03 | 3 | 6744 | 9 | +------------+------+------+-------+ 3 rows in set (0.00 sec) mysql&gt; select * from work limit 3; +------------+-----------+------+ | test_time | test_type | uid | +------------+-----------+------+ | 2013-04-01 | 12 | 2344 | | 2014-04-01 | 13 | 2122 | | 2014-04-02 | 14 | 6744 | +------------+-----------+------+ 3 rows in set (0.00 sec)其中：event表里存放事件发生时间， 发生的种类，user的id，以及user的分数work表里存放测试时间，测试类型的编号，user的id要求：在event表里找出4月4号到4月29号的user，统计他们发生event的次数以及总的分数(score),和socre的最大值，以及这个user在work表里这段时间参加test为11，12的次数 分析: 连接两个表：我们将通过uid字段连接event表和work表，以便能够访问与同一用户相关的所有信息。 限制日期范围：使用WHERE子句限定event表中event_time字段的日期在4月4号到4月29号之间。 筛选特定测试类型：在连接的表中筛选work表的test_type为11或12的记录。 分组和统计：按照uid分组，以便为每个用户计算事件发生的次数、总分数、最大分数，以及特定测试类型的参加次数。 12345678910111213-- 答案 select e.uid, COUNT(e.uid) AS event_count, SUM(e.score) AS total_score, MAX(e.score) AS max_score, COUNT(w.uid) AS work_countfrom event eLEFT JOIN work w ON e.uid = w.uid AND w.test_time BETWEEN '2013-04-01' AND '2013-04-29' AND w.test_type IN (11,12) where e.event_time BETWEEN '2013-04-01' AND '2013-04-29' GROUP BY e.uid; 123456789101112131415161718192021222324252627282930313233-- 验证 创建库中的数据-- 创建student数据库CREATE DATABASE student;-- 使用student数据库USE student;-- 创建xx表,定义uid，等信息create table event (event_time DATE,type INT,uid INT,score INT);-- 创建xx表,定义uid，等信息create table work (test_time DATE,test_type INT,uid INT);insert into event VALUES('2013-04-01',1,2344,34),('2013-04-02',2,2122,21),('2013-04-03',3,6744,9);insert into work values('2013-04-01',12,2344),('2014-04-01',13,2122),('2014-04-02',14,6744); 12、有两个文件内容如下:12345678910111213141516171819202122232425262728293031323334353637a.txt:251235308 306433616578 8972910088709 1243343163213 1182b.txt:33616578 HN 189910088709 GD 80343163213 BJ 253610112757 GD 90使用awk处理两个文件得到以下输出:251235308 3064 - -33616578 8972 HN 189910088709 1243 GD 80343163213 1182 BJ 253610112757 - GD 90 awk 'NR==FNR{b[$1]=$2 FS $3; next} {print $1, $2, (b[$1] ? b[$1] : &quot;- -&quot;)} END{for (i in b) if (!a[i]) print i, &quot;-&quot;, b[i]}' b.txt a.txt 13、Server上运行进程 gamesvrd，请制定一个监控方案（需脚本实现）。123456789101112131415#!/bin/bash# 答案 # 进程名称process=&quot;gamesvrd&quot;# 检查进程是否运行if pgrep -x &quot;$process&quot; &gt;/dev/nullthen echo &quot;$process is running&quot;else echo &quot;$process stopped&quot; # 在这里添加启动进程的命令 # /path/to/$process &amp; echo &quot;$process restarted&quot;fi 14、使用python，写一个方法获取URL中的查询字符串的参数，如：http://baidu.com/?a=c&amp;b=d&amp;r=45，返回{a:&quot;c&quot;,b:&quot;d&quot;,r:45}1234567891011# python -m pip install --upgrade pip# pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple# pip3 install requests selenium pyquery pymysql pymongo redis flask django&gt;&gt;&gt; from urllib.parse import urlparse,parse_qs&gt;&gt;&gt; url=urlparse('http://baidu.com/?a=c&amp;b=d&amp;r=45')&gt;&gt;&gt; params = parse_qs(url.query)&gt;&gt;&gt; result = {k: v[0] for k,v in params.items()}&gt;&gt;&gt; print(result){'a': 'c', 'b': 'd', 'r': '45'}&gt;&gt;&gt; 15、日常工作中遇到如下场景日志里出现unable to attach to shared memory，可能的原因是什么，如何解决？ 如何判断程序是否存在内存泄露？ rm删除文件后空间没有释放，可能的原因和解决方法 某台服务器出现CPU 100%，你如何分析？ 一后端服务，发现在与用户通信时，偶概率会出现可以收到用户侧的数据包，但是发送给用户的数据包用户收不到的情况，请简述排障思路。","link":"/posts/37965.html"}],"tags":[{"name":"kubernetes","slug":"kubernetes","link":"/tags/kubernetes/"},{"name":"grpc","slug":"grpc","link":"/tags/grpc/"},{"name":"虚拟化","slug":"虚拟化","link":"/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"terraform","slug":"terraform","link":"/tags/terraform/"},{"name":"windows","slug":"windows","link":"/tags/windows/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"ChatGPT","slug":"ChatGPT","link":"/tags/ChatGPT/"},{"name":"AI","slug":"AI","link":"/tags/AI/"},{"name":"嫁接","slug":"嫁接","link":"/tags/%E5%AB%81%E6%8E%A5/"},{"name":"tools","slug":"tools","link":"/tags/tools/"},{"name":"扦插","slug":"扦插","link":"/tags/%E6%89%A6%E6%8F%92/"},{"name":"油画","slug":"油画","link":"/tags/%E6%B2%B9%E7%94%BB/"},{"name":"土","slug":"土","link":"/tags/%E5%9C%9F/"},{"name":"生活","slug":"生活","link":"/tags/%E7%94%9F%E6%B4%BB/"},{"name":"养花","slug":"养花","link":"/tags/%E5%85%BB%E8%8A%B1/"}],"categories":[{"name":"云原生","slug":"云原生","link":"/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"},{"name":"kubernetes","slug":"云原生/kubernetes","link":"/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/kubernetes/"},{"name":"linux","slug":"linux","link":"/categories/linux/"},{"name":"服务","slug":"服务","link":"/categories/%E6%9C%8D%E5%8A%A1/"},{"name":"devops","slug":"devops","link":"/categories/devops/"},{"name":"Windows","slug":"Windows","link":"/categories/Windows/"},{"name":"proxmox ve","slug":"linux/proxmox-ve","link":"/categories/linux/proxmox-ve/"},{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"hexo","slug":"服务/hexo","link":"/categories/%E6%9C%8D%E5%8A%A1/hexo/"},{"name":"shell","slug":"linux/shell","link":"/categories/linux/shell/"},{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"},{"name":"生活","slug":"生活","link":"/categories/%E7%94%9F%E6%B4%BB/"},{"name":"terraform","slug":"devops/terraform","link":"/categories/devops/terraform/"},{"name":"coding","slug":"coding","link":"/categories/coding/"},{"name":"嫁接","slug":"生活/嫁接","link":"/categories/%E7%94%9F%E6%B4%BB/%E5%AB%81%E6%8E%A5/"},{"name":"算法","slug":"coding/算法","link":"/categories/coding/%E7%AE%97%E6%B3%95/"},{"name":"test","slug":"test","link":"/categories/test/"},{"name":"养花","slug":"生活/养花","link":"/categories/%E7%94%9F%E6%B4%BB/%E5%85%BB%E8%8A%B1/"},{"name":"面试","slug":"面试","link":"/categories/%E9%9D%A2%E8%AF%95/"},{"name":"hexo","slug":"test/hexo","link":"/categories/test/hexo/"},{"name":"腾讯","slug":"面试/腾讯","link":"/categories/%E9%9D%A2%E8%AF%95/%E8%85%BE%E8%AE%AF/"},{"name":"icarus","slug":"test/hexo/icarus","link":"/categories/test/hexo/icarus/"}],"pages":[{"title":"","text":"google-site-verification: googleee2c90ec88ce191f.html","link":"/googleee2c90ec88ce191f.html"},{"title":"404","text":"寻找失踪宝贝 - 公益 404","link":"/404.html"},{"title":"关于","text":"galendu 邮箱: galendu@foxmail.com","link":"/about/index.html"},{"title":"文章类别","text":"","link":"/categories/index.html"},{"title":"","text":"galendu blog /* 一般设置 */ Galendu Blog 主页 YouTube视频下载 下载 第一段内容 第二段内容 前端学习链接 w3school Ant Design Vue Vant轻量、可定制的移动端 Vue 组件库 k8s学习链接 CASBIN golang学习链接 go学习 go视频 相关链接 这是一个超链接 这是一个超链接 这是一个超链接 这是一个超链接 This container has a max-width of $widescreen - $container-offset on fullhd. Galendu Blog by Galen Du CC BY 4.0 DEED.","link":"/navigation/index.html"},{"title":"","text":"[{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/d57905b93540bd15f0c48230dbbbff7ee0d645ff539e38866e2d15c8b9f7dfcd.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV1 综合\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226231/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/20115388de0207131af17eac86c33049b95d69eaff064e55653a1b941810a006.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV2 财经\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226195/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/7b7a65c712450da3deb6ca66fbacf4f9aee00d3f20bd80eafb5ada01ec63eb3a.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV3 综艺\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226397/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/f357e58fdbcc076a3d65e1f958c942b2e14f14342c60736ceed98b092d35356a.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV4 中文国际\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226191/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/0a6a7138952675983a3d854df7688557b286d59aa06166edae51506f9204d655.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV5 体育\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226395/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/741515efda91f03f455df8a7da4ee11fa9329139c276435cf0a9e2af398d5bf2.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV6 电影\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226393/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/b29af94e295ebdf646cefb68122c429b9cd921f498ca20d2d8070252536f9ff9.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV7 国防军事\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226192/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/ad51de94426a0ba039e6dd6a8534ea98ecc813a6176bde87b4f18cc34d6d7590.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV8 电视剧\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226391/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/2ed1b4deeca179d5db806bb941790f82eb92a1b7299c1c38fe027f95a5caee5e.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV9 记录\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226197/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/aa6157ec65188cd41826e5a2f088c3d6d153205f5f6428258d12c59999e221aa.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV10 科教\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226189/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/ed12ed7c7a1034dae4350011fe039284c5d5a836506b28c9e32e3c75299625c0.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV11 戏曲\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226240/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/484083cffaa40df7e659565e8cb4d1cc740158a185512114167aa21fa0c59240.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV12 社会与法\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226190/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/266da7b43c03e2312186b4a999e0f060e8f15b10d2cc2c9aa32171819254cf1a.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV13 新闻\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226233/index.m3u8\",\"https://live-play.cctvnews.cctv.com/cctv/merge_cctv13.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/af6b603896938dc346fbb16abfc63c12cba54b0ec9d18770a15d347d115f12d5.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV14 少儿\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226193/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/53793fa7bacd3a93ff6dc5d2758418985e1f952a316c335d663b572d8bdcd74d.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV16 奥林匹克\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226921/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/649ad76a90bfef55b05db9fe52e006487280f619089099d5dc971e387fc6eff0.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CCTV5+ 体育赛事\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226221/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/4d549e53e6d0f632d5a633d1945280797b153e588f919221a07faa869812cc89.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"风云剧场\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888893/224/3221226950/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/a556bd7d93ce65e18f243a8892b5604f4faa994a4897315914216a710a706208.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"第一剧场\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888893/224/3221226959/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/bb3c6c9e145d698137f5bb64a582021a01b51344b929003630eb769ea65832a9.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"世界地理\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226947/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/bbf1d024c5228b8dd128b0e3cb1717d173fab4ee84c3a4c8a57b1a215362ca3b.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"风云音乐\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888893/224/3221226953/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/4c6b6a6d3839889f34d33db3c2f80233b26b74d3489b393487635f8704e70796.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"兵器科技\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888893/224/3221226975/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/cd1e2bb52b06a991de168733e5ff0f1d85adc8042d40c8f393f723543e5dd08a.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"风云足球\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888893/224/3221226984/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/cdd1b31ede7a5ad049ed53d9a072422f829e72dd062ed2c19e077fdd01699071.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"高尔夫网球\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888893/224/3221226978/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/10e14a92478011aa6c3c8562e62127f3b1908e29fcd78e4b2b24b9e6d3ec2fbc.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"央视台球\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888893/224/3221226956/index.m3u8\"]},{\"group\":\"央视频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/244d72c0eb1615ed7d51c2f5db5a67f306aa3f58c05bc2d34de3aa7e956dc8c9.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"电视指南\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888893/224/3221226987/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/9bd372ca292a82ce3aa08772b07efc4af1f85c21d1f268ea33440c49e9a0a488.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"东方卫视\",\"uris\":[\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226217/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/4120e89d3079d08aa17d382f69a2308ec70839b278367763c34a34666c75cb88.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"湖南卫视\",\"uris\":[\"http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226307/index.m3u8\",\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226211/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/7a6be5a2bb1dc53a945c016ff1f525dc4a84c51db371c15c89aa55404b0ba784.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"湖北卫视\",\"uris\":[\"http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226477/index.m3u8\",\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226194/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/ac4ed6058a87c101ae7147ebc38905d0cae047fb73fd277ee5049b84f52bda36.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"辽宁卫视\",\"uris\":[\"http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226546/index.m3u8\",\"http://39.134.18.195/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226201/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/380ad685c0c1d5b2c902246b8d2df6d3f9b45e2837abcfe493075bbded597a31.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"江苏卫视\",\"uris\":[\"http://39.134.24.166/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226200/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/3c760d0d00463855890e8a1864ea4a6b6dd66b90c29b4ac714a4b17c16519871.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"江西卫视\",\"uris\":[\"http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226344/index.m3u8\",\"http://dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221225764/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/22d403f07a7cf5410b3ad3ddb65a11aa229a32475fac213f5344c9f0ec330ca1.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"山东卫视\",\"uris\":[\"http://39.134.18.194:80/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221225771/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/28886880a4dc0f06fb7e0a528a1def0591d61a65870e29176ede0cc92033bbfd.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"广东卫视\",\"uris\":[\"http://39.134.18.193/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221225757/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/54b7e97cb816bb223fe05f3fc44da2c7820eb66e8550c19d23100f2c414ecc38.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"广西卫视\",\"uris\":[\"http://live.gxrb.com.cn/tv/gxtvlive03/index.m3u8\",\"http://dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221225770/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/657651f411de2673d1770d9a78b44c1265704f7468cc41d4be7f51d630768494.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"重庆卫视\",\"uris\":[\"http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226409/index.m3u8\",\"http://dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226202/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/74925962148a6d31c85808b6cd4e444c2a54bab393d2c5fc85e960b50e22fa86.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"河南卫视\",\"uris\":[\"http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226480/index.m3u8\",\"http://dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221225767/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/d545becdc81c60197b08c7f47380705e4665ed3fe55efc8b855e486f6e655378.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"河北卫视\",\"uris\":[\"http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226406/index.m3u8\",\"http://dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221225750/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/4eb45f4781d33d872af027dc01c941559aab55667dd99cc5c22bef7037807b13.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"贵州卫视\",\"uris\":[\"http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226474/index.m3u8\",\"http://dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221225793/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/f4f23633c578beea49a3841d88d3490100f029ee349059fa532869db889872c5.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"北京卫视\",\"uris\":[\"http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221225728/index.m3u8\",\"http://dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226222/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/d8273ae9be698ce2db21f5b886ecac95a73429593f93713c60ed8c12c38bf0d3.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"黑龙江卫视\",\"uris\":[\"http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226327/index.m3u8\",\"http://dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226215/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/a66c836bd98ba3e41a2e9a570d4b9c50dedc6839e9de333e2e78212ad505f37e.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"浙江卫视\",\"uris\":[\"http://39.134.18.194:80/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226199/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/f35fa04b51b1ee4984b03578b65403570868ebca03c6c01e11b097f999a58d9b.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"安徽卫视\",\"uris\":[\"http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226391/index.m3u8\",\"http://39.134.18.194:80/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226203/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/d59fec04c902e3581c617136d02d4b9b8c4cbe64272781ddd3525e80c823edb7.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"深圳卫视\",\"uris\":[\"http://39.134.24.166/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226205/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/3276a414ae0eaa0f116f2045cd913367967d0c7c1e978e8621ac3879436c6ed7.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"四川卫视\",\"uris\":[\"http://39.134.24.166/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221225768/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/3208fe6564a293c21b711333fb3edb05bb5b406cff840573c9a8d839680a1579.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"东南卫视\",\"uris\":[\"http://ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226341/index.m3u8\",\"http://dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221225766/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/6e060391fde0469801fc3d84dbf204b4f8d650d251f17d7595a6964c0bb99e81.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"海南卫视\",\"uris\":[\"http://39.135.133.149:80/ottrrs.hl.chinamobile.com/PLTV/88888888/224/3221226465/index.m3u8\",\"http://39.134.24.161:80/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221225769/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"\",\"name\":\"\",\"title\":\"天津卫视\",\"uris\":[\"http://39.134.18.193:80/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221226204/index.m3u8\"]},{\"group\":\"地方频道\",\"logo\":\"\",\"name\":\"\",\"title\":\"新疆卫视\",\"uris\":[\"http://39.134.24.165:80/dbiptv.sn.chinamobile.com/PLTV/88888890/224/3221225747/index.m3u8\"]},{\"group\":\"国际频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/a72dff758ca1c17cd0ecc8cedc11b893d208f409d5e6302faa0e9d298848abc3.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CGTN\",\"uris\":[\"http://live.cgtn.com/1000/prog_index.m3u8\"]},{\"group\":\"国际频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/a8d0046a47433d952bf6ed17062deb8bd2184ba9aec0f7781df6bf9487a3ffcf.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CGTN 法语频道\",\"uris\":[\"https://livefr.cgtn.com/1000f/prog_index.m3u8\"]},{\"group\":\"国际频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/bf0a820893cbaf20dd0333e27042e1ef9c8806e5b602b6a8c95af399db0bc77a.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CGTN 俄语频道\",\"uris\":[\"http://liveru.cgtn.com/1000r/prog_index.m3u8\"]},{\"group\":\"国际频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202306/2e44e2aa3e7a1cedf07fd0ae59fe69e86a60a2632660a006e3e9e7397b2d107e.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CGTN 阿拉伯语频道\",\"uris\":[\"http://livear.cgtn.com/1000a/prog_index.m3u8\"]},{\"group\":\"国际频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202309/7c337e3dbe64402ec7e4678a619a4a6d95144e42f35161181ff78e143b7cf67a.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CGTN 西班牙语频道\",\"uris\":[\"http://livees.cgtn.com/500e/prog_index.m3u8\",\"http://livees.cgtn.com/1000e/prog_index.m3u8\"]},{\"group\":\"国际频道\",\"logo\":\"https://resources.yangshipin.cn/assets/oms/image/202309/74d3ac436a7e374879578de1d87a941fbf566d39d5632b027c5097891ed32bd5.png?imageMogr2/format/webp\",\"name\":\"\",\"title\":\"CGTN 纪录频道\",\"uris\":[\"https://livedoc.cgtn.com/500d/prog_index.m3u8\"]}]","link":"/file/channels.json"},{"title":"文章标签","text":"","link":"/tags/index.html"},{"title":"","text":"Document Home Examples Documentation Download Title Subtitle Overview Modifiers Grid Elements Components Layout","link":"/navigation/galendu-blog/index.html"},{"title":"","text":"function downloadVideo() { var input = document.getElementById('urlInput').value.trim(); if (input) { var downloadUrl = 'https://sfrom.net/' + encodeURIComponent(input); window.open(downloadUrl, '_blank'); } else { alert('请输入YouTube视频链接！'); } }","link":"/navigation/scripts/main.js"},{"title":"","text":"html, body { margin: 0; padding: 0; } html { font-size: 10px; background-color: #a9a9a9; } body { width: 70%; margin: 0 auto; } /* 文字排版 */ h1, h2, h3 { font-family: 'Sonsie One', 'ZCOOL KuaiLe', cursive; color: #2a2a2a; } p, input, li { font-family: 'Open Sans Condensed', sans-serif; color: #2a2a2a; } h1 { font-size: 4rem; text-align: center; color: white; text-shadow: 2px 2px 10px black; } h2 { font-size: 3rem; text-align: center; } h3 { font-size: 2.2rem; } p, li { font-size: 1.6rem; line-height: 1.5; } /* 标题布局 */ nav, article, aside, footer { background-color: white; padding: 1%; } nav { height: 50px; background-color: #66ccff; display: flex; margin-bottom: 10px; } nav ul { padding: 0; list-style-type: none; flex: 2; display: flex; } nav li { display: inline; text-align: center; flex: 1; } nav a { display: inline-block; font-size: 2rem; text-transform: uppercase; text-decoration: none; color: black; transition-duration: 200ms; } nav form { flex: 1; display: flex; align-items: center; height: 100%; padding: 0 2em; } nav a:hover { color: white; text-shadow: 0 0 10px wheat; transition-duration: 200ms; } input { font-size: 1.6rem; height: 32px; } input[type=\"search\"] { flex: 3; } input[type=\"submit\"] { flex: 1; margin-left: 1rem; background: #333; border: 0; color: white; } /* 主体布局 */ main { display: flex; } article { flex: 4; } /* 设置 container 内所有文本的大小 */ .container .field .control .button, .container .field .control .input { font-size: 15px; /* 你可以根据需要调整这个值 */ } aside { flex: 1; margin-left:10px; background-color: #66ccff; position: static; } aside li { padding-bottom: 10px; } footer { margin-top: 10px; } .container { margin-top: 0px; }","link":"/navigation/styles/style.css"},{"title":"","text":"","link":"/navigation/galendu-blog/scripts/main.js"},{"title":"","text":"@import \"https://cdn.jsdelivr.net/npm/bulma@1.0.0/css/bulma.min.css\";","link":"/navigation/galendu-blog/styles/style.css"}]}